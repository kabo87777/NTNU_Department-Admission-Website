{"version":3,"file":"useBaseQuery.mjs","sources":["../../src/useBaseQuery.ts"],"sourcesContent":["import { onScopeDispose, toRefs, readonly, reactive, watch } from 'vue-demi'\nimport type { ToRefs, UnwrapRef } from 'vue-demi'\nimport type {\n  QueryObserver,\n  QueryKey,\n  QueryObserverOptions,\n  QueryObserverResult,\n  QueryFunction,\n} from '@tanstack/query-core'\nimport { useQueryClient } from './useQueryClient'\nimport { updateState, isQueryKey, cloneDeepUnref } from './utils'\nimport type { WithQueryClientKey } from './types'\nimport type { UseQueryOptions } from './useQuery'\nimport type { UseInfiniteQueryOptions } from './useInfiniteQuery'\n\nexport type UseQueryReturnType<\n  TData,\n  TError,\n  Result = QueryObserverResult<TData, TError>,\n> = ToRefs<Readonly<Result>> & {\n  suspense: () => Promise<Result>\n}\n\ntype UseQueryOptionsGeneric<\n  TQueryFnData,\n  TError,\n  TData,\n  TQueryKey extends QueryKey = QueryKey,\n> =\n  | UseQueryOptions<TQueryFnData, TError, TData, TQueryKey>\n  | UseInfiniteQueryOptions<TQueryFnData, TError, TData, TQueryKey>\n\nexport function useBaseQuery<\n  TQueryFnData,\n  TError,\n  TData,\n  TQueryData,\n  TQueryKey extends QueryKey,\n>(\n  Observer: typeof QueryObserver,\n  arg1:\n    | TQueryKey\n    | UseQueryOptionsGeneric<TQueryFnData, TError, TData, TQueryKey>,\n  arg2:\n    | QueryFunction<TQueryFnData, UnwrapRef<TQueryKey>>\n    | UseQueryOptionsGeneric<TQueryFnData, TError, TData, TQueryKey> = {},\n  arg3: UseQueryOptionsGeneric<TQueryFnData, TError, TData, TQueryKey> = {},\n): UseQueryReturnType<TData, TError> {\n  const options = getQueryUnreffedOptions()\n  const queryClient =\n    options.queryClient ?? useQueryClient(options.queryClientKey)\n  const defaultedOptions = queryClient.defaultQueryOptions(options)\n  const observer = new Observer(queryClient, defaultedOptions)\n  const state = reactive(observer.getCurrentResult())\n  const unsubscribe = observer.subscribe((result) => {\n    updateState(state, result)\n  })\n\n  watch(\n    [() => arg1, () => arg2, () => arg3],\n    () => {\n      observer.setOptions(\n        queryClient.defaultQueryOptions(getQueryUnreffedOptions()),\n      )\n    },\n    { deep: true },\n  )\n\n  onScopeDispose(() => {\n    unsubscribe()\n  })\n\n  const suspense = () => {\n    return new Promise<QueryObserverResult<TData, TError>>((resolve) => {\n      const run = () => {\n        const newOptions = queryClient.defaultQueryOptions(\n          getQueryUnreffedOptions(),\n        )\n        if (newOptions.enabled !== false) {\n          const optimisticResult = observer.getOptimisticResult(newOptions)\n          if (optimisticResult.isStale) {\n            resolve(observer.fetchOptimistic(defaultedOptions))\n          } else {\n            resolve(optimisticResult)\n          }\n        }\n      }\n\n      run()\n\n      watch([() => arg1, () => arg2, () => arg3], run, { deep: true })\n    })\n  }\n\n  return {\n    ...(toRefs(readonly(state)) as UseQueryReturnType<TData, TError>),\n    suspense,\n  }\n\n  /**\n   * Get Query Options object\n   * All inner refs unwrapped. No Reactivity\n   */\n  function getQueryUnreffedOptions() {\n    let mergedOptions\n\n    if (!isQueryKey(arg1)) {\n      // `useQuery(optionsObj)`\n      mergedOptions = arg1\n    } else if (typeof arg2 === 'function') {\n      // `useQuery(queryKey, queryFn, optionsObj?)`\n      mergedOptions = { ...arg3, queryKey: arg1, queryFn: arg2 }\n    } else {\n      // `useQuery(queryKey, optionsObj?)`\n      mergedOptions = { ...arg2, queryKey: arg1 }\n    }\n\n    return cloneDeepUnref(mergedOptions) as WithQueryClientKey<\n      QueryObserverOptions<TQueryFnData, TError, TData, TQueryData, TQueryKey>\n    >\n  }\n}\n"],"names":["useBaseQuery","Observer","arg1","arg2","arg3","options","getQueryUnreffedOptions","queryClient","useQueryClient","queryClientKey","defaultedOptions","defaultQueryOptions","observer","state","reactive","getCurrentResult","unsubscribe","subscribe","result","updateState","watch","setOptions","deep","onScopeDispose","suspense","Promise","resolve","run","newOptions","enabled","optimisticResult","getOptimisticResult","isStale","fetchOptimistic","toRefs","readonly","mergedOptions","isQueryKey","queryKey","queryFn","cloneDeepUnref"],"mappings":"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"}