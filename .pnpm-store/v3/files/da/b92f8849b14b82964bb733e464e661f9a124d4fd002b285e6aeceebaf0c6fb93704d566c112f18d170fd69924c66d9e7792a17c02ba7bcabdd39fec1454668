{"version":3,"file":"index.production.js","sources":["../../../query-core/build/lib/subscribable.mjs","../../../query-core/build/lib/utils.mjs","../../../query-core/build/lib/focusManager.mjs","../../../query-core/build/lib/onlineManager.mjs","../../../query-core/build/lib/retryer.mjs","../../../query-core/build/lib/logger.mjs","../../../query-core/build/lib/notifyManager.mjs","../../../query-core/build/lib/removable.mjs","../../../query-core/build/lib/query.mjs","../../../query-core/build/lib/queryCache.mjs","../../../query-core/build/lib/mutation.mjs","../../../query-core/build/lib/mutationCache.mjs","../../../query-core/build/lib/infiniteQueryBehavior.mjs","../../../query-core/build/lib/queryObserver.mjs","../../../query-core/build/lib/queriesObserver.mjs","../../../query-core/build/lib/infiniteQueryObserver.mjs","../../../query-core/build/lib/mutationObserver.mjs","../../../query-core/build/lib/hydration.mjs","../../src/utils.ts","../../src/useQueryClient.ts","../../src/queryCache.ts","../../src/mutationCache.ts","../../src/queryClient.ts","../../../query-core/build/lib/queryClient.mjs","../../src/vueQueryPlugin.ts","../../src/useBaseQuery.ts","../../src/useMutation.ts","../../src/useIsFetching.ts","../../src/useIsMutating.ts","../../src/useInfiniteQuery.ts","../../src/useQueries.ts","../../src/useQuery.ts"],"sourcesContent":["class Subscribable {\n  constructor() {\n    this.listeners = [];\n    this.subscribe = this.subscribe.bind(this);\n  }\n\n  subscribe(listener) {\n    this.listeners.push(listener);\n    this.onSubscribe();\n    return () => {\n      this.listeners = this.listeners.filter(x => x !== listener);\n      this.onUnsubscribe();\n    };\n  }\n\n  hasListeners() {\n    return this.listeners.length > 0;\n  }\n\n  onSubscribe() {// Do nothing\n  }\n\n  onUnsubscribe() {// Do nothing\n  }\n\n}\n\nexport { Subscribable };\n//# sourceMappingURL=subscribable.mjs.map\n","// TYPES\n// UTILS\nconst isServer = typeof window === 'undefined';\nfunction noop() {\n  return undefined;\n}\nfunction functionalUpdate(updater, input) {\n  return typeof updater === 'function' ? updater(input) : updater;\n}\nfunction isValidTimeout(value) {\n  return typeof value === 'number' && value >= 0 && value !== Infinity;\n}\nfunction difference(array1, array2) {\n  return array1.filter(x => array2.indexOf(x) === -1);\n}\nfunction replaceAt(array, index, value) {\n  const copy = array.slice(0);\n  copy[index] = value;\n  return copy;\n}\nfunction timeUntilStale(updatedAt, staleTime) {\n  return Math.max(updatedAt + (staleTime || 0) - Date.now(), 0);\n}\nfunction parseQueryArgs(arg1, arg2, arg3) {\n  if (!isQueryKey(arg1)) {\n    return arg1;\n  }\n\n  if (typeof arg2 === 'function') {\n    return { ...arg3,\n      queryKey: arg1,\n      queryFn: arg2\n    };\n  }\n\n  return { ...arg2,\n    queryKey: arg1\n  };\n}\nfunction parseMutationArgs(arg1, arg2, arg3) {\n  if (isQueryKey(arg1)) {\n    if (typeof arg2 === 'function') {\n      return { ...arg3,\n        mutationKey: arg1,\n        mutationFn: arg2\n      };\n    }\n\n    return { ...arg2,\n      mutationKey: arg1\n    };\n  }\n\n  if (typeof arg1 === 'function') {\n    return { ...arg2,\n      mutationFn: arg1\n    };\n  }\n\n  return { ...arg1\n  };\n}\nfunction parseFilterArgs(arg1, arg2, arg3) {\n  return isQueryKey(arg1) ? [{ ...arg2,\n    queryKey: arg1\n  }, arg3] : [arg1 || {}, arg2];\n}\nfunction parseMutationFilterArgs(arg1, arg2, arg3) {\n  return isQueryKey(arg1) ? [{ ...arg2,\n    mutationKey: arg1\n  }, arg3] : [arg1 || {}, arg2];\n}\nfunction matchQuery(filters, query) {\n  const {\n    type = 'all',\n    exact,\n    fetchStatus,\n    predicate,\n    queryKey,\n    stale\n  } = filters;\n\n  if (isQueryKey(queryKey)) {\n    if (exact) {\n      if (query.queryHash !== hashQueryKeyByOptions(queryKey, query.options)) {\n        return false;\n      }\n    } else if (!partialMatchKey(query.queryKey, queryKey)) {\n      return false;\n    }\n  }\n\n  if (type !== 'all') {\n    const isActive = query.isActive();\n\n    if (type === 'active' && !isActive) {\n      return false;\n    }\n\n    if (type === 'inactive' && isActive) {\n      return false;\n    }\n  }\n\n  if (typeof stale === 'boolean' && query.isStale() !== stale) {\n    return false;\n  }\n\n  if (typeof fetchStatus !== 'undefined' && fetchStatus !== query.state.fetchStatus) {\n    return false;\n  }\n\n  if (predicate && !predicate(query)) {\n    return false;\n  }\n\n  return true;\n}\nfunction matchMutation(filters, mutation) {\n  const {\n    exact,\n    fetching,\n    predicate,\n    mutationKey\n  } = filters;\n\n  if (isQueryKey(mutationKey)) {\n    if (!mutation.options.mutationKey) {\n      return false;\n    }\n\n    if (exact) {\n      if (hashQueryKey(mutation.options.mutationKey) !== hashQueryKey(mutationKey)) {\n        return false;\n      }\n    } else if (!partialMatchKey(mutation.options.mutationKey, mutationKey)) {\n      return false;\n    }\n  }\n\n  if (typeof fetching === 'boolean' && mutation.state.status === 'loading' !== fetching) {\n    return false;\n  }\n\n  if (predicate && !predicate(mutation)) {\n    return false;\n  }\n\n  return true;\n}\nfunction hashQueryKeyByOptions(queryKey, options) {\n  const hashFn = (options == null ? void 0 : options.queryKeyHashFn) || hashQueryKey;\n  return hashFn(queryKey);\n}\n/**\n * Default query keys hash function.\n * Hashes the value into a stable hash.\n */\n\nfunction hashQueryKey(queryKey) {\n  return JSON.stringify(queryKey, (_, val) => isPlainObject(val) ? Object.keys(val).sort().reduce((result, key) => {\n    result[key] = val[key];\n    return result;\n  }, {}) : val);\n}\n/**\n * Checks if key `b` partially matches with key `a`.\n */\n\nfunction partialMatchKey(a, b) {\n  return partialDeepEqual(a, b);\n}\n/**\n * Checks if `b` partially matches with `a`.\n */\n\nfunction partialDeepEqual(a, b) {\n  if (a === b) {\n    return true;\n  }\n\n  if (typeof a !== typeof b) {\n    return false;\n  }\n\n  if (a && b && typeof a === 'object' && typeof b === 'object') {\n    return !Object.keys(b).some(key => !partialDeepEqual(a[key], b[key]));\n  }\n\n  return false;\n}\n/**\n * This function returns `a` if `b` is deeply equal.\n * If not, it will replace any deeply equal children of `b` with those of `a`.\n * This can be used for structural sharing between JSON values for example.\n */\n\nfunction replaceEqualDeep(a, b) {\n  if (a === b) {\n    return a;\n  }\n\n  const array = isPlainArray(a) && isPlainArray(b);\n\n  if (array || isPlainObject(a) && isPlainObject(b)) {\n    const aSize = array ? a.length : Object.keys(a).length;\n    const bItems = array ? b : Object.keys(b);\n    const bSize = bItems.length;\n    const copy = array ? [] : {};\n    let equalItems = 0;\n\n    for (let i = 0; i < bSize; i++) {\n      const key = array ? i : bItems[i];\n      copy[key] = replaceEqualDeep(a[key], b[key]);\n\n      if (copy[key] === a[key]) {\n        equalItems++;\n      }\n    }\n\n    return aSize === bSize && equalItems === aSize ? a : copy;\n  }\n\n  return b;\n}\n/**\n * Shallow compare objects. Only works with objects that always have the same properties.\n */\n\nfunction shallowEqualObjects(a, b) {\n  if (a && !b || b && !a) {\n    return false;\n  }\n\n  for (const key in a) {\n    if (a[key] !== b[key]) {\n      return false;\n    }\n  }\n\n  return true;\n}\nfunction isPlainArray(value) {\n  return Array.isArray(value) && value.length === Object.keys(value).length;\n} // Copied from: https://github.com/jonschlinkert/is-plain-object\n\nfunction isPlainObject(o) {\n  if (!hasObjectPrototype(o)) {\n    return false;\n  } // If has modified constructor\n\n\n  const ctor = o.constructor;\n\n  if (typeof ctor === 'undefined') {\n    return true;\n  } // If has modified prototype\n\n\n  const prot = ctor.prototype;\n\n  if (!hasObjectPrototype(prot)) {\n    return false;\n  } // If constructor does not have an Object-specific method\n\n\n  if (!prot.hasOwnProperty('isPrototypeOf')) {\n    return false;\n  } // Most likely a plain Object\n\n\n  return true;\n}\n\nfunction hasObjectPrototype(o) {\n  return Object.prototype.toString.call(o) === '[object Object]';\n}\n\nfunction isQueryKey(value) {\n  return Array.isArray(value);\n}\nfunction isError(value) {\n  return value instanceof Error;\n}\nfunction sleep(timeout) {\n  return new Promise(resolve => {\n    setTimeout(resolve, timeout);\n  });\n}\n/**\n * Schedules a microtask.\n * This can be useful to schedule state updates after rendering.\n */\n\nfunction scheduleMicrotask(callback) {\n  sleep(0).then(callback);\n}\nfunction getAbortController() {\n  if (typeof AbortController === 'function') {\n    return new AbortController();\n  }\n}\nfunction replaceData(prevData, data, options) {\n  // Use prev data if an isDataEqual function is defined and returns `true`\n  if (options.isDataEqual != null && options.isDataEqual(prevData, data)) {\n    return prevData;\n  } else if (typeof options.structuralSharing === 'function') {\n    return options.structuralSharing(prevData, data);\n  } else if (options.structuralSharing !== false) {\n    // Structurally share data between prev and new data if needed\n    return replaceEqualDeep(prevData, data);\n  }\n\n  return data;\n}\n\nexport { difference, functionalUpdate, getAbortController, hashQueryKey, hashQueryKeyByOptions, isError, isPlainArray, isPlainObject, isQueryKey, isServer, isValidTimeout, matchMutation, matchQuery, noop, parseFilterArgs, parseMutationArgs, parseMutationFilterArgs, parseQueryArgs, partialDeepEqual, partialMatchKey, replaceAt, replaceData, replaceEqualDeep, scheduleMicrotask, shallowEqualObjects, sleep, timeUntilStale };\n//# sourceMappingURL=utils.mjs.map\n","import { Subscribable } from './subscribable.mjs';\nimport { isServer } from './utils.mjs';\n\nclass FocusManager extends Subscribable {\n  constructor() {\n    super();\n\n    this.setup = onFocus => {\n      // addEventListener does not exist in React Native, but window does\n      // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n      if (!isServer && window.addEventListener) {\n        const listener = () => onFocus(); // Listen to visibillitychange and focus\n\n\n        window.addEventListener('visibilitychange', listener, false);\n        window.addEventListener('focus', listener, false);\n        return () => {\n          // Be sure to unsubscribe if a new handler is set\n          window.removeEventListener('visibilitychange', listener);\n          window.removeEventListener('focus', listener);\n        };\n      }\n    };\n  }\n\n  onSubscribe() {\n    if (!this.cleanup) {\n      this.setEventListener(this.setup);\n    }\n  }\n\n  onUnsubscribe() {\n    if (!this.hasListeners()) {\n      var _this$cleanup;\n\n      (_this$cleanup = this.cleanup) == null ? void 0 : _this$cleanup.call(this);\n      this.cleanup = undefined;\n    }\n  }\n\n  setEventListener(setup) {\n    var _this$cleanup2;\n\n    this.setup = setup;\n    (_this$cleanup2 = this.cleanup) == null ? void 0 : _this$cleanup2.call(this);\n    this.cleanup = setup(focused => {\n      if (typeof focused === 'boolean') {\n        this.setFocused(focused);\n      } else {\n        this.onFocus();\n      }\n    });\n  }\n\n  setFocused(focused) {\n    this.focused = focused;\n\n    if (focused) {\n      this.onFocus();\n    }\n  }\n\n  onFocus() {\n    this.listeners.forEach(listener => {\n      listener();\n    });\n  }\n\n  isFocused() {\n    if (typeof this.focused === 'boolean') {\n      return this.focused;\n    } // document global can be unavailable in react native\n\n\n    if (typeof document === 'undefined') {\n      return true;\n    }\n\n    return [undefined, 'visible', 'prerender'].includes(document.visibilityState);\n  }\n\n}\nconst focusManager = new FocusManager();\n\nexport { FocusManager, focusManager };\n//# sourceMappingURL=focusManager.mjs.map\n","import { Subscribable } from './subscribable.mjs';\nimport { isServer } from './utils.mjs';\n\nclass OnlineManager extends Subscribable {\n  constructor() {\n    super();\n\n    this.setup = onOnline => {\n      // addEventListener does not exist in React Native, but window does\n      // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n      if (!isServer && window.addEventListener) {\n        const listener = () => onOnline(); // Listen to online\n\n\n        window.addEventListener('online', listener, false);\n        window.addEventListener('offline', listener, false);\n        return () => {\n          // Be sure to unsubscribe if a new handler is set\n          window.removeEventListener('online', listener);\n          window.removeEventListener('offline', listener);\n        };\n      }\n    };\n  }\n\n  onSubscribe() {\n    if (!this.cleanup) {\n      this.setEventListener(this.setup);\n    }\n  }\n\n  onUnsubscribe() {\n    if (!this.hasListeners()) {\n      var _this$cleanup;\n\n      (_this$cleanup = this.cleanup) == null ? void 0 : _this$cleanup.call(this);\n      this.cleanup = undefined;\n    }\n  }\n\n  setEventListener(setup) {\n    var _this$cleanup2;\n\n    this.setup = setup;\n    (_this$cleanup2 = this.cleanup) == null ? void 0 : _this$cleanup2.call(this);\n    this.cleanup = setup(online => {\n      if (typeof online === 'boolean') {\n        this.setOnline(online);\n      } else {\n        this.onOnline();\n      }\n    });\n  }\n\n  setOnline(online) {\n    this.online = online;\n\n    if (online) {\n      this.onOnline();\n    }\n  }\n\n  onOnline() {\n    this.listeners.forEach(listener => {\n      listener();\n    });\n  }\n\n  isOnline() {\n    if (typeof this.online === 'boolean') {\n      return this.online;\n    }\n\n    if (typeof navigator === 'undefined' || typeof navigator.onLine === 'undefined') {\n      return true;\n    }\n\n    return navigator.onLine;\n  }\n\n}\nconst onlineManager = new OnlineManager();\n\nexport { OnlineManager, onlineManager };\n//# sourceMappingURL=onlineManager.mjs.map\n","import { focusManager } from './focusManager.mjs';\nimport { onlineManager } from './onlineManager.mjs';\nimport { sleep } from './utils.mjs';\n\nfunction defaultRetryDelay(failureCount) {\n  return Math.min(1000 * 2 ** failureCount, 30000);\n}\n\nfunction canFetch(networkMode) {\n  return (networkMode != null ? networkMode : 'online') === 'online' ? onlineManager.isOnline() : true;\n}\nclass CancelledError {\n  constructor(options) {\n    this.revert = options == null ? void 0 : options.revert;\n    this.silent = options == null ? void 0 : options.silent;\n  }\n\n}\nfunction isCancelledError(value) {\n  return value instanceof CancelledError;\n}\nfunction createRetryer(config) {\n  let isRetryCancelled = false;\n  let failureCount = 0;\n  let isResolved = false;\n  let continueFn;\n  let promiseResolve;\n  let promiseReject;\n  const promise = new Promise((outerResolve, outerReject) => {\n    promiseResolve = outerResolve;\n    promiseReject = outerReject;\n  });\n\n  const cancel = cancelOptions => {\n    if (!isResolved) {\n      reject(new CancelledError(cancelOptions));\n      config.abort == null ? void 0 : config.abort();\n    }\n  };\n\n  const cancelRetry = () => {\n    isRetryCancelled = true;\n  };\n\n  const continueRetry = () => {\n    isRetryCancelled = false;\n  };\n\n  const shouldPause = () => !focusManager.isFocused() || config.networkMode !== 'always' && !onlineManager.isOnline();\n\n  const resolve = value => {\n    if (!isResolved) {\n      isResolved = true;\n      config.onSuccess == null ? void 0 : config.onSuccess(value);\n      continueFn == null ? void 0 : continueFn();\n      promiseResolve(value);\n    }\n  };\n\n  const reject = value => {\n    if (!isResolved) {\n      isResolved = true;\n      config.onError == null ? void 0 : config.onError(value);\n      continueFn == null ? void 0 : continueFn();\n      promiseReject(value);\n    }\n  };\n\n  const pause = () => {\n    return new Promise(continueResolve => {\n      continueFn = value => {\n        if (isResolved || !shouldPause()) {\n          return continueResolve(value);\n        }\n      };\n\n      config.onPause == null ? void 0 : config.onPause();\n    }).then(() => {\n      continueFn = undefined;\n\n      if (!isResolved) {\n        config.onContinue == null ? void 0 : config.onContinue();\n      }\n    });\n  }; // Create loop function\n\n\n  const run = () => {\n    // Do nothing if already resolved\n    if (isResolved) {\n      return;\n    }\n\n    let promiseOrValue; // Execute query\n\n    try {\n      promiseOrValue = config.fn();\n    } catch (error) {\n      promiseOrValue = Promise.reject(error);\n    }\n\n    Promise.resolve(promiseOrValue).then(resolve).catch(error => {\n      var _config$retry, _config$retryDelay;\n\n      // Stop if the fetch is already resolved\n      if (isResolved) {\n        return;\n      } // Do we need to retry the request?\n\n\n      const retry = (_config$retry = config.retry) != null ? _config$retry : 3;\n      const retryDelay = (_config$retryDelay = config.retryDelay) != null ? _config$retryDelay : defaultRetryDelay;\n      const delay = typeof retryDelay === 'function' ? retryDelay(failureCount, error) : retryDelay;\n      const shouldRetry = retry === true || typeof retry === 'number' && failureCount < retry || typeof retry === 'function' && retry(failureCount, error);\n\n      if (isRetryCancelled || !shouldRetry) {\n        // We are done if the query does not need to be retried\n        reject(error);\n        return;\n      }\n\n      failureCount++; // Notify on fail\n\n      config.onFail == null ? void 0 : config.onFail(failureCount, error); // Delay\n\n      sleep(delay) // Pause if the document is not visible or when the device is offline\n      .then(() => {\n        if (shouldPause()) {\n          return pause();\n        }\n      }).then(() => {\n        if (isRetryCancelled) {\n          reject(error);\n        } else {\n          run();\n        }\n      });\n    });\n  }; // Start loop\n\n\n  if (canFetch(config.networkMode)) {\n    run();\n  } else {\n    pause().then(run);\n  }\n\n  return {\n    promise,\n    cancel,\n    continue: () => {\n      continueFn == null ? void 0 : continueFn();\n    },\n    cancelRetry,\n    continueRetry\n  };\n}\n\nexport { CancelledError, canFetch, createRetryer, isCancelledError };\n//# sourceMappingURL=retryer.mjs.map\n","const defaultLogger = console;\n\nexport { defaultLogger };\n//# sourceMappingURL=logger.mjs.map\n","import { scheduleMicrotask } from './utils.mjs';\n\nfunction createNotifyManager() {\n  let queue = [];\n  let transactions = 0;\n\n  let notifyFn = callback => {\n    callback();\n  };\n\n  let batchNotifyFn = callback => {\n    callback();\n  };\n\n  const batch = callback => {\n    let result;\n    transactions++;\n\n    try {\n      result = callback();\n    } finally {\n      transactions--;\n\n      if (!transactions) {\n        flush();\n      }\n    }\n\n    return result;\n  };\n\n  const schedule = callback => {\n    if (transactions) {\n      queue.push(callback);\n    } else {\n      scheduleMicrotask(() => {\n        notifyFn(callback);\n      });\n    }\n  };\n  /**\n   * All calls to the wrapped function will be batched.\n   */\n\n\n  const batchCalls = callback => {\n    return (...args) => {\n      schedule(() => {\n        callback(...args);\n      });\n    };\n  };\n\n  const flush = () => {\n    const originalQueue = queue;\n    queue = [];\n\n    if (originalQueue.length) {\n      scheduleMicrotask(() => {\n        batchNotifyFn(() => {\n          originalQueue.forEach(callback => {\n            notifyFn(callback);\n          });\n        });\n      });\n    }\n  };\n  /**\n   * Use this method to set a custom notify function.\n   * This can be used to for example wrap notifications with `React.act` while running tests.\n   */\n\n\n  const setNotifyFunction = fn => {\n    notifyFn = fn;\n  };\n  /**\n   * Use this method to set a custom function to batch notifications together into a single tick.\n   * By default React Query will use the batch function provided by ReactDOM or React Native.\n   */\n\n\n  const setBatchNotifyFunction = fn => {\n    batchNotifyFn = fn;\n  };\n\n  return {\n    batch,\n    batchCalls,\n    schedule,\n    setNotifyFunction,\n    setBatchNotifyFunction\n  };\n} // SINGLETON\n\nconst notifyManager = createNotifyManager();\n\nexport { createNotifyManager, notifyManager };\n//# sourceMappingURL=notifyManager.mjs.map\n","import { isValidTimeout, isServer } from './utils.mjs';\n\nclass Removable {\n  destroy() {\n    this.clearGcTimeout();\n  }\n\n  scheduleGc() {\n    this.clearGcTimeout();\n\n    if (isValidTimeout(this.cacheTime)) {\n      this.gcTimeout = setTimeout(() => {\n        this.optionalRemove();\n      }, this.cacheTime);\n    }\n  }\n\n  updateCacheTime(newCacheTime) {\n    // Default to 5 minutes (Infinity for server-side) if no cache time is set\n    this.cacheTime = Math.max(this.cacheTime || 0, newCacheTime != null ? newCacheTime : isServer ? Infinity : 5 * 60 * 1000);\n  }\n\n  clearGcTimeout() {\n    if (this.gcTimeout) {\n      clearTimeout(this.gcTimeout);\n      this.gcTimeout = undefined;\n    }\n  }\n\n}\n\nexport { Removable };\n//# sourceMappingURL=removable.mjs.map\n","import { replaceData, noop, timeUntilStale, getAbortController } from './utils.mjs';\nimport { defaultLogger } from './logger.mjs';\nimport { notifyManager } from './notifyManager.mjs';\nimport { createRetryer, isCancelledError, canFetch } from './retryer.mjs';\nimport { Removable } from './removable.mjs';\n\n// CLASS\nclass Query extends Removable {\n  constructor(config) {\n    super();\n    this.abortSignalConsumed = false;\n    this.defaultOptions = config.defaultOptions;\n    this.setOptions(config.options);\n    this.observers = [];\n    this.cache = config.cache;\n    this.logger = config.logger || defaultLogger;\n    this.queryKey = config.queryKey;\n    this.queryHash = config.queryHash;\n    this.initialState = config.state || getDefaultState(this.options);\n    this.state = this.initialState;\n    this.meta = config.meta;\n  }\n\n  setOptions(options) {\n    this.options = { ...this.defaultOptions,\n      ...options\n    };\n    this.meta = options == null ? void 0 : options.meta;\n    this.updateCacheTime(this.options.cacheTime);\n  }\n\n  optionalRemove() {\n    if (!this.observers.length && this.state.fetchStatus === 'idle') {\n      this.cache.remove(this);\n    }\n  }\n\n  setData(newData, options) {\n    const data = replaceData(this.state.data, newData, this.options); // Set data and mark it as cached\n\n    this.dispatch({\n      data,\n      type: 'success',\n      dataUpdatedAt: options == null ? void 0 : options.updatedAt,\n      manual: options == null ? void 0 : options.manual\n    });\n    return data;\n  }\n\n  setState(state, setStateOptions) {\n    this.dispatch({\n      type: 'setState',\n      state,\n      setStateOptions\n    });\n  }\n\n  cancel(options) {\n    var _this$retryer;\n\n    const promise = this.promise;\n    (_this$retryer = this.retryer) == null ? void 0 : _this$retryer.cancel(options);\n    return promise ? promise.then(noop).catch(noop) : Promise.resolve();\n  }\n\n  destroy() {\n    super.destroy();\n    this.cancel({\n      silent: true\n    });\n  }\n\n  reset() {\n    this.destroy();\n    this.setState(this.initialState);\n  }\n\n  isActive() {\n    return this.observers.some(observer => observer.options.enabled !== false);\n  }\n\n  isDisabled() {\n    return this.getObserversCount() > 0 && !this.isActive();\n  }\n\n  isStale() {\n    return this.state.isInvalidated || !this.state.dataUpdatedAt || this.observers.some(observer => observer.getCurrentResult().isStale);\n  }\n\n  isStaleByTime(staleTime = 0) {\n    return this.state.isInvalidated || !this.state.dataUpdatedAt || !timeUntilStale(this.state.dataUpdatedAt, staleTime);\n  }\n\n  onFocus() {\n    var _this$retryer2;\n\n    const observer = this.observers.find(x => x.shouldFetchOnWindowFocus());\n\n    if (observer) {\n      observer.refetch({\n        cancelRefetch: false\n      });\n    } // Continue fetch if currently paused\n\n\n    (_this$retryer2 = this.retryer) == null ? void 0 : _this$retryer2.continue();\n  }\n\n  onOnline() {\n    var _this$retryer3;\n\n    const observer = this.observers.find(x => x.shouldFetchOnReconnect());\n\n    if (observer) {\n      observer.refetch({\n        cancelRefetch: false\n      });\n    } // Continue fetch if currently paused\n\n\n    (_this$retryer3 = this.retryer) == null ? void 0 : _this$retryer3.continue();\n  }\n\n  addObserver(observer) {\n    if (this.observers.indexOf(observer) === -1) {\n      this.observers.push(observer); // Stop the query from being garbage collected\n\n      this.clearGcTimeout();\n      this.cache.notify({\n        type: 'observerAdded',\n        query: this,\n        observer\n      });\n    }\n  }\n\n  removeObserver(observer) {\n    if (this.observers.indexOf(observer) !== -1) {\n      this.observers = this.observers.filter(x => x !== observer);\n\n      if (!this.observers.length) {\n        // If the transport layer does not support cancellation\n        // we'll let the query continue so the result can be cached\n        if (this.retryer) {\n          if (this.abortSignalConsumed) {\n            this.retryer.cancel({\n              revert: true\n            });\n          } else {\n            this.retryer.cancelRetry();\n          }\n        }\n\n        this.scheduleGc();\n      }\n\n      this.cache.notify({\n        type: 'observerRemoved',\n        query: this,\n        observer\n      });\n    }\n  }\n\n  getObserversCount() {\n    return this.observers.length;\n  }\n\n  invalidate() {\n    if (!this.state.isInvalidated) {\n      this.dispatch({\n        type: 'invalidate'\n      });\n    }\n  }\n\n  fetch(options, fetchOptions) {\n    var _this$options$behavio, _context$fetchOptions;\n\n    if (this.state.fetchStatus !== 'idle') {\n      if (this.state.dataUpdatedAt && fetchOptions != null && fetchOptions.cancelRefetch) {\n        // Silently cancel current fetch if the user wants to cancel refetches\n        this.cancel({\n          silent: true\n        });\n      } else if (this.promise) {\n        var _this$retryer4;\n\n        // make sure that retries that were potentially cancelled due to unmounts can continue\n        (_this$retryer4 = this.retryer) == null ? void 0 : _this$retryer4.continueRetry(); // Return current promise if we are already fetching\n\n        return this.promise;\n      }\n    } // Update config if passed, otherwise the config from the last execution is used\n\n\n    if (options) {\n      this.setOptions(options);\n    } // Use the options from the first observer with a query function if no function is found.\n    // This can happen when the query is hydrated or created with setQueryData.\n\n\n    if (!this.options.queryFn) {\n      const observer = this.observers.find(x => x.options.queryFn);\n\n      if (observer) {\n        this.setOptions(observer.options);\n      }\n    }\n\n    if (!Array.isArray(this.options.queryKey)) {\n      if (process.env.NODE_ENV !== 'production') {\n        this.logger.error(\"As of v4, queryKey needs to be an Array. If you are using a string like 'repoData', please change it to an Array, e.g. ['repoData']\");\n      }\n    }\n\n    const abortController = getAbortController(); // Create query function context\n\n    const queryFnContext = {\n      queryKey: this.queryKey,\n      pageParam: undefined,\n      meta: this.meta\n    }; // Adds an enumerable signal property to the object that\n    // which sets abortSignalConsumed to true when the signal\n    // is read.\n\n    const addSignalProperty = object => {\n      Object.defineProperty(object, 'signal', {\n        enumerable: true,\n        get: () => {\n          if (abortController) {\n            this.abortSignalConsumed = true;\n            return abortController.signal;\n          }\n\n          return undefined;\n        }\n      });\n    };\n\n    addSignalProperty(queryFnContext); // Create fetch function\n\n    const fetchFn = () => {\n      if (!this.options.queryFn) {\n        return Promise.reject('Missing queryFn');\n      }\n\n      this.abortSignalConsumed = false;\n      return this.options.queryFn(queryFnContext);\n    }; // Trigger behavior hook\n\n\n    const context = {\n      fetchOptions,\n      options: this.options,\n      queryKey: this.queryKey,\n      state: this.state,\n      fetchFn,\n      meta: this.meta\n    };\n    addSignalProperty(context);\n    (_this$options$behavio = this.options.behavior) == null ? void 0 : _this$options$behavio.onFetch(context); // Store state in case the current fetch needs to be reverted\n\n    this.revertState = this.state; // Set to fetching state if not already in it\n\n    if (this.state.fetchStatus === 'idle' || this.state.fetchMeta !== ((_context$fetchOptions = context.fetchOptions) == null ? void 0 : _context$fetchOptions.meta)) {\n      var _context$fetchOptions2;\n\n      this.dispatch({\n        type: 'fetch',\n        meta: (_context$fetchOptions2 = context.fetchOptions) == null ? void 0 : _context$fetchOptions2.meta\n      });\n    }\n\n    const onError = error => {\n      // Optimistically update state if needed\n      if (!(isCancelledError(error) && error.silent)) {\n        this.dispatch({\n          type: 'error',\n          error: error\n        });\n      }\n\n      if (!isCancelledError(error)) {\n        var _this$cache$config$on, _this$cache$config;\n\n        // Notify cache callback\n        (_this$cache$config$on = (_this$cache$config = this.cache.config).onError) == null ? void 0 : _this$cache$config$on.call(_this$cache$config, error, this);\n\n        if (process.env.NODE_ENV !== 'production') {\n          this.logger.error(error);\n        }\n      }\n\n      if (!this.isFetchingOptimistic) {\n        // Schedule query gc after fetching\n        this.scheduleGc();\n      }\n\n      this.isFetchingOptimistic = false;\n    }; // Try to fetch the data\n\n\n    this.retryer = createRetryer({\n      fn: context.fetchFn,\n      abort: abortController == null ? void 0 : abortController.abort.bind(abortController),\n      onSuccess: data => {\n        var _this$cache$config$on2, _this$cache$config2;\n\n        if (typeof data === 'undefined') {\n          if (process.env.NODE_ENV !== 'production') {\n            this.logger.error(\"Query data cannot be undefined. Please make sure to return a value other than undefined from your query function. Affected query key: \" + this.queryHash);\n          }\n\n          onError(new Error('undefined'));\n          return;\n        }\n\n        this.setData(data); // Notify cache callback\n\n        (_this$cache$config$on2 = (_this$cache$config2 = this.cache.config).onSuccess) == null ? void 0 : _this$cache$config$on2.call(_this$cache$config2, data, this);\n\n        if (!this.isFetchingOptimistic) {\n          // Schedule query gc after fetching\n          this.scheduleGc();\n        }\n\n        this.isFetchingOptimistic = false;\n      },\n      onError,\n      onFail: () => {\n        this.dispatch({\n          type: 'failed'\n        });\n      },\n      onPause: () => {\n        this.dispatch({\n          type: 'pause'\n        });\n      },\n      onContinue: () => {\n        this.dispatch({\n          type: 'continue'\n        });\n      },\n      retry: context.options.retry,\n      retryDelay: context.options.retryDelay,\n      networkMode: context.options.networkMode\n    });\n    this.promise = this.retryer.promise;\n    return this.promise;\n  }\n\n  dispatch(action) {\n    const reducer = state => {\n      var _action$meta, _action$dataUpdatedAt;\n\n      switch (action.type) {\n        case 'failed':\n          return { ...state,\n            fetchFailureCount: state.fetchFailureCount + 1\n          };\n\n        case 'pause':\n          return { ...state,\n            fetchStatus: 'paused'\n          };\n\n        case 'continue':\n          return { ...state,\n            fetchStatus: 'fetching'\n          };\n\n        case 'fetch':\n          return { ...state,\n            fetchFailureCount: 0,\n            fetchMeta: (_action$meta = action.meta) != null ? _action$meta : null,\n            fetchStatus: canFetch(this.options.networkMode) ? 'fetching' : 'paused',\n            ...(!state.dataUpdatedAt && {\n              error: null,\n              status: 'loading'\n            })\n          };\n\n        case 'success':\n          return { ...state,\n            data: action.data,\n            dataUpdateCount: state.dataUpdateCount + 1,\n            dataUpdatedAt: (_action$dataUpdatedAt = action.dataUpdatedAt) != null ? _action$dataUpdatedAt : Date.now(),\n            error: null,\n            isInvalidated: false,\n            status: 'success',\n            ...(!action.manual && {\n              fetchStatus: 'idle',\n              fetchFailureCount: 0\n            })\n          };\n\n        case 'error':\n          const error = action.error;\n\n          if (isCancelledError(error) && error.revert && this.revertState) {\n            return { ...this.revertState\n            };\n          }\n\n          return { ...state,\n            error: error,\n            errorUpdateCount: state.errorUpdateCount + 1,\n            errorUpdatedAt: Date.now(),\n            fetchFailureCount: state.fetchFailureCount + 1,\n            fetchStatus: 'idle',\n            status: 'error'\n          };\n\n        case 'invalidate':\n          return { ...state,\n            isInvalidated: true\n          };\n\n        case 'setState':\n          return { ...state,\n            ...action.state\n          };\n      }\n    };\n\n    this.state = reducer(this.state);\n    notifyManager.batch(() => {\n      this.observers.forEach(observer => {\n        observer.onQueryUpdate(action);\n      });\n      this.cache.notify({\n        query: this,\n        type: 'updated',\n        action\n      });\n    });\n  }\n\n}\n\nfunction getDefaultState(options) {\n  const data = typeof options.initialData === 'function' ? options.initialData() : options.initialData;\n  const hasInitialData = typeof options.initialData !== 'undefined';\n  const initialDataUpdatedAt = hasInitialData ? typeof options.initialDataUpdatedAt === 'function' ? options.initialDataUpdatedAt() : options.initialDataUpdatedAt : 0;\n  const hasData = typeof data !== 'undefined';\n  return {\n    data,\n    dataUpdateCount: 0,\n    dataUpdatedAt: hasData ? initialDataUpdatedAt != null ? initialDataUpdatedAt : Date.now() : 0,\n    error: null,\n    errorUpdateCount: 0,\n    errorUpdatedAt: 0,\n    fetchFailureCount: 0,\n    fetchMeta: null,\n    isInvalidated: false,\n    status: hasData ? 'success' : 'loading',\n    fetchStatus: 'idle'\n  };\n}\n\nexport { Query };\n//# sourceMappingURL=query.mjs.map\n","import { hashQueryKeyByOptions, parseFilterArgs, matchQuery } from './utils.mjs';\nimport { Query } from './query.mjs';\nimport { notifyManager } from './notifyManager.mjs';\nimport { Subscribable } from './subscribable.mjs';\n\n// CLASS\nclass QueryCache extends Subscribable {\n  constructor(config) {\n    super();\n    this.config = config || {};\n    this.queries = [];\n    this.queriesMap = {};\n  }\n\n  build(client, options, state) {\n    var _options$queryHash;\n\n    const queryKey = options.queryKey;\n    const queryHash = (_options$queryHash = options.queryHash) != null ? _options$queryHash : hashQueryKeyByOptions(queryKey, options);\n    let query = this.get(queryHash);\n\n    if (!query) {\n      query = new Query({\n        cache: this,\n        logger: client.getLogger(),\n        queryKey,\n        queryHash,\n        options: client.defaultQueryOptions(options),\n        state,\n        defaultOptions: client.getQueryDefaults(queryKey),\n        meta: options.meta\n      });\n      this.add(query);\n    }\n\n    return query;\n  }\n\n  add(query) {\n    if (!this.queriesMap[query.queryHash]) {\n      this.queriesMap[query.queryHash] = query;\n      this.queries.push(query);\n      this.notify({\n        type: 'added',\n        query\n      });\n    }\n  }\n\n  remove(query) {\n    const queryInMap = this.queriesMap[query.queryHash];\n\n    if (queryInMap) {\n      query.destroy();\n      this.queries = this.queries.filter(x => x !== query);\n\n      if (queryInMap === query) {\n        delete this.queriesMap[query.queryHash];\n      }\n\n      this.notify({\n        type: 'removed',\n        query\n      });\n    }\n  }\n\n  clear() {\n    notifyManager.batch(() => {\n      this.queries.forEach(query => {\n        this.remove(query);\n      });\n    });\n  }\n\n  get(queryHash) {\n    return this.queriesMap[queryHash];\n  }\n\n  getAll() {\n    return this.queries;\n  }\n\n  find(arg1, arg2) {\n    const [filters] = parseFilterArgs(arg1, arg2);\n\n    if (typeof filters.exact === 'undefined') {\n      filters.exact = true;\n    }\n\n    return this.queries.find(query => matchQuery(filters, query));\n  }\n\n  findAll(arg1, arg2) {\n    const [filters] = parseFilterArgs(arg1, arg2);\n    return Object.keys(filters).length > 0 ? this.queries.filter(query => matchQuery(filters, query)) : this.queries;\n  }\n\n  notify(event) {\n    notifyManager.batch(() => {\n      this.listeners.forEach(listener => {\n        listener(event);\n      });\n    });\n  }\n\n  onFocus() {\n    notifyManager.batch(() => {\n      this.queries.forEach(query => {\n        query.onFocus();\n      });\n    });\n  }\n\n  onOnline() {\n    notifyManager.batch(() => {\n      this.queries.forEach(query => {\n        query.onOnline();\n      });\n    });\n  }\n\n}\n\nexport { QueryCache };\n//# sourceMappingURL=queryCache.mjs.map\n","import { defaultLogger } from './logger.mjs';\nimport { notifyManager } from './notifyManager.mjs';\nimport { Removable } from './removable.mjs';\nimport { createRetryer, canFetch } from './retryer.mjs';\n\n// CLASS\nclass Mutation extends Removable {\n  constructor(config) {\n    super();\n    this.options = { ...config.defaultOptions,\n      ...config.options\n    };\n    this.mutationId = config.mutationId;\n    this.mutationCache = config.mutationCache;\n    this.logger = config.logger || defaultLogger;\n    this.observers = [];\n    this.state = config.state || getDefaultState();\n    this.meta = config.meta;\n    this.updateCacheTime(this.options.cacheTime);\n    this.scheduleGc();\n  }\n\n  setState(state) {\n    this.dispatch({\n      type: 'setState',\n      state\n    });\n  }\n\n  addObserver(observer) {\n    if (this.observers.indexOf(observer) === -1) {\n      this.observers.push(observer); // Stop the mutation from being garbage collected\n\n      this.clearGcTimeout();\n      this.mutationCache.notify({\n        type: 'observerAdded',\n        mutation: this,\n        observer\n      });\n    }\n  }\n\n  removeObserver(observer) {\n    this.observers = this.observers.filter(x => x !== observer);\n    this.scheduleGc();\n    this.mutationCache.notify({\n      type: 'observerRemoved',\n      mutation: this,\n      observer\n    });\n  }\n\n  optionalRemove() {\n    if (!this.observers.length) {\n      if (this.state.status === 'loading') {\n        this.scheduleGc();\n      } else {\n        this.mutationCache.remove(this);\n      }\n    }\n  }\n\n  continue() {\n    if (this.retryer) {\n      this.retryer.continue();\n      return this.retryer.promise;\n    }\n\n    return this.execute();\n  }\n\n  async execute() {\n    const executeMutation = () => {\n      var _this$options$retry;\n\n      this.retryer = createRetryer({\n        fn: () => {\n          if (!this.options.mutationFn) {\n            return Promise.reject('No mutationFn found');\n          }\n\n          return this.options.mutationFn(this.state.variables);\n        },\n        onFail: () => {\n          this.dispatch({\n            type: 'failed'\n          });\n        },\n        onPause: () => {\n          this.dispatch({\n            type: 'pause'\n          });\n        },\n        onContinue: () => {\n          this.dispatch({\n            type: 'continue'\n          });\n        },\n        retry: (_this$options$retry = this.options.retry) != null ? _this$options$retry : 0,\n        retryDelay: this.options.retryDelay,\n        networkMode: this.options.networkMode\n      });\n      return this.retryer.promise;\n    };\n\n    const restored = this.state.status === 'loading';\n\n    try {\n      var _this$mutationCache$c3, _this$mutationCache$c4, _this$options$onSucce, _this$options2, _this$options$onSettl, _this$options3;\n\n      if (!restored) {\n        var _this$mutationCache$c, _this$mutationCache$c2, _this$options$onMutat, _this$options;\n\n        this.dispatch({\n          type: 'loading',\n          variables: this.options.variables\n        }); // Notify cache callback\n\n        await ((_this$mutationCache$c = (_this$mutationCache$c2 = this.mutationCache.config).onMutate) == null ? void 0 : _this$mutationCache$c.call(_this$mutationCache$c2, this.state.variables, this));\n        const context = await ((_this$options$onMutat = (_this$options = this.options).onMutate) == null ? void 0 : _this$options$onMutat.call(_this$options, this.state.variables));\n\n        if (context !== this.state.context) {\n          this.dispatch({\n            type: 'loading',\n            context,\n            variables: this.state.variables\n          });\n        }\n      }\n\n      const data = await executeMutation(); // Notify cache callback\n\n      await ((_this$mutationCache$c3 = (_this$mutationCache$c4 = this.mutationCache.config).onSuccess) == null ? void 0 : _this$mutationCache$c3.call(_this$mutationCache$c4, data, this.state.variables, this.state.context, this));\n      await ((_this$options$onSucce = (_this$options2 = this.options).onSuccess) == null ? void 0 : _this$options$onSucce.call(_this$options2, data, this.state.variables, this.state.context));\n      await ((_this$options$onSettl = (_this$options3 = this.options).onSettled) == null ? void 0 : _this$options$onSettl.call(_this$options3, data, null, this.state.variables, this.state.context));\n      this.dispatch({\n        type: 'success',\n        data\n      });\n      return data;\n    } catch (error) {\n      try {\n        var _this$mutationCache$c5, _this$mutationCache$c6, _this$options$onError, _this$options4, _this$options$onSettl2, _this$options5;\n\n        // Notify cache callback\n        await ((_this$mutationCache$c5 = (_this$mutationCache$c6 = this.mutationCache.config).onError) == null ? void 0 : _this$mutationCache$c5.call(_this$mutationCache$c6, error, this.state.variables, this.state.context, this));\n\n        if (process.env.NODE_ENV !== 'production') {\n          this.logger.error(error);\n        }\n\n        await ((_this$options$onError = (_this$options4 = this.options).onError) == null ? void 0 : _this$options$onError.call(_this$options4, error, this.state.variables, this.state.context));\n        await ((_this$options$onSettl2 = (_this$options5 = this.options).onSettled) == null ? void 0 : _this$options$onSettl2.call(_this$options5, undefined, error, this.state.variables, this.state.context));\n        throw error;\n      } finally {\n        this.dispatch({\n          type: 'error',\n          error: error\n        });\n      }\n    }\n  }\n\n  dispatch(action) {\n    const reducer = state => {\n      switch (action.type) {\n        case 'failed':\n          return { ...state,\n            failureCount: state.failureCount + 1\n          };\n\n        case 'pause':\n          return { ...state,\n            isPaused: true\n          };\n\n        case 'continue':\n          return { ...state,\n            isPaused: false\n          };\n\n        case 'loading':\n          return { ...state,\n            context: action.context,\n            data: undefined,\n            error: null,\n            isPaused: !canFetch(this.options.networkMode),\n            status: 'loading',\n            variables: action.variables\n          };\n\n        case 'success':\n          return { ...state,\n            data: action.data,\n            error: null,\n            status: 'success',\n            isPaused: false\n          };\n\n        case 'error':\n          return { ...state,\n            data: undefined,\n            error: action.error,\n            failureCount: state.failureCount + 1,\n            isPaused: false,\n            status: 'error'\n          };\n\n        case 'setState':\n          return { ...state,\n            ...action.state\n          };\n      }\n    };\n\n    this.state = reducer(this.state);\n    notifyManager.batch(() => {\n      this.observers.forEach(observer => {\n        observer.onMutationUpdate(action);\n      });\n      this.mutationCache.notify({\n        mutation: this,\n        type: 'updated',\n        action\n      });\n    });\n  }\n\n}\nfunction getDefaultState() {\n  return {\n    context: undefined,\n    data: undefined,\n    error: null,\n    failureCount: 0,\n    isPaused: false,\n    status: 'idle',\n    variables: undefined\n  };\n}\n\nexport { Mutation, getDefaultState };\n//# sourceMappingURL=mutation.mjs.map\n","import { notifyManager } from './notifyManager.mjs';\nimport { Mutation } from './mutation.mjs';\nimport { matchMutation, noop } from './utils.mjs';\nimport { Subscribable } from './subscribable.mjs';\n\n// CLASS\nclass MutationCache extends Subscribable {\n  constructor(config) {\n    super();\n    this.config = config || {};\n    this.mutations = [];\n    this.mutationId = 0;\n  }\n\n  build(client, options, state) {\n    const mutation = new Mutation({\n      mutationCache: this,\n      logger: client.getLogger(),\n      mutationId: ++this.mutationId,\n      options: client.defaultMutationOptions(options),\n      state,\n      defaultOptions: options.mutationKey ? client.getMutationDefaults(options.mutationKey) : undefined,\n      meta: options.meta\n    });\n    this.add(mutation);\n    return mutation;\n  }\n\n  add(mutation) {\n    this.mutations.push(mutation);\n    this.notify({\n      type: 'added',\n      mutation\n    });\n  }\n\n  remove(mutation) {\n    this.mutations = this.mutations.filter(x => x !== mutation);\n    this.notify({\n      type: 'removed',\n      mutation\n    });\n  }\n\n  clear() {\n    notifyManager.batch(() => {\n      this.mutations.forEach(mutation => {\n        this.remove(mutation);\n      });\n    });\n  }\n\n  getAll() {\n    return this.mutations;\n  }\n\n  find(filters) {\n    if (typeof filters.exact === 'undefined') {\n      filters.exact = true;\n    }\n\n    return this.mutations.find(mutation => matchMutation(filters, mutation));\n  }\n\n  findAll(filters) {\n    return this.mutations.filter(mutation => matchMutation(filters, mutation));\n  }\n\n  notify(event) {\n    notifyManager.batch(() => {\n      this.listeners.forEach(listener => {\n        listener(event);\n      });\n    });\n  }\n\n  resumePausedMutations() {\n    const pausedMutations = this.mutations.filter(x => x.state.isPaused);\n    return notifyManager.batch(() => pausedMutations.reduce((promise, mutation) => promise.then(() => mutation.continue().catch(noop)), Promise.resolve()));\n  }\n\n}\n\nexport { MutationCache };\n//# sourceMappingURL=mutationCache.mjs.map\n","function infiniteQueryBehavior() {\n  return {\n    onFetch: context => {\n      context.fetchFn = () => {\n        var _context$fetchOptions, _context$fetchOptions2, _context$fetchOptions3, _context$fetchOptions4, _context$state$data, _context$state$data2;\n\n        const refetchPage = (_context$fetchOptions = context.fetchOptions) == null ? void 0 : (_context$fetchOptions2 = _context$fetchOptions.meta) == null ? void 0 : _context$fetchOptions2.refetchPage;\n        const fetchMore = (_context$fetchOptions3 = context.fetchOptions) == null ? void 0 : (_context$fetchOptions4 = _context$fetchOptions3.meta) == null ? void 0 : _context$fetchOptions4.fetchMore;\n        const pageParam = fetchMore == null ? void 0 : fetchMore.pageParam;\n        const isFetchingNextPage = (fetchMore == null ? void 0 : fetchMore.direction) === 'forward';\n        const isFetchingPreviousPage = (fetchMore == null ? void 0 : fetchMore.direction) === 'backward';\n        const oldPages = ((_context$state$data = context.state.data) == null ? void 0 : _context$state$data.pages) || [];\n        const oldPageParams = ((_context$state$data2 = context.state.data) == null ? void 0 : _context$state$data2.pageParams) || [];\n        let newPageParams = oldPageParams;\n        let cancelled = false;\n\n        const addSignalProperty = object => {\n          Object.defineProperty(object, 'signal', {\n            enumerable: true,\n            get: () => {\n              var _context$signal;\n\n              if ((_context$signal = context.signal) != null && _context$signal.aborted) {\n                cancelled = true;\n              } else {\n                var _context$signal2;\n\n                (_context$signal2 = context.signal) == null ? void 0 : _context$signal2.addEventListener('abort', () => {\n                  cancelled = true;\n                });\n              }\n\n              return context.signal;\n            }\n          });\n        }; // Get query function\n\n\n        const queryFn = context.options.queryFn || (() => Promise.reject('Missing queryFn'));\n\n        const buildNewPages = (pages, param, page, previous) => {\n          newPageParams = previous ? [param, ...newPageParams] : [...newPageParams, param];\n          return previous ? [page, ...pages] : [...pages, page];\n        }; // Create function to fetch a page\n\n\n        const fetchPage = (pages, manual, param, previous) => {\n          if (cancelled) {\n            return Promise.reject('Cancelled');\n          }\n\n          if (typeof param === 'undefined' && !manual && pages.length) {\n            return Promise.resolve(pages);\n          }\n\n          const queryFnContext = {\n            queryKey: context.queryKey,\n            pageParam: param,\n            meta: context.meta\n          };\n          addSignalProperty(queryFnContext);\n          const queryFnResult = queryFn(queryFnContext);\n          const promise = Promise.resolve(queryFnResult).then(page => buildNewPages(pages, param, page, previous));\n          return promise;\n        };\n\n        let promise; // Fetch first page?\n\n        if (!oldPages.length) {\n          promise = fetchPage([]);\n        } // Fetch next page?\n        else if (isFetchingNextPage) {\n          const manual = typeof pageParam !== 'undefined';\n          const param = manual ? pageParam : getNextPageParam(context.options, oldPages);\n          promise = fetchPage(oldPages, manual, param);\n        } // Fetch previous page?\n        else if (isFetchingPreviousPage) {\n          const manual = typeof pageParam !== 'undefined';\n          const param = manual ? pageParam : getPreviousPageParam(context.options, oldPages);\n          promise = fetchPage(oldPages, manual, param, true);\n        } // Refetch pages\n        else {\n          newPageParams = [];\n          const manual = typeof context.options.getNextPageParam === 'undefined';\n          const shouldFetchFirstPage = refetchPage && oldPages[0] ? refetchPage(oldPages[0], 0, oldPages) : true; // Fetch first page\n\n          promise = shouldFetchFirstPage ? fetchPage([], manual, oldPageParams[0]) : Promise.resolve(buildNewPages([], oldPageParams[0], oldPages[0])); // Fetch remaining pages\n\n          for (let i = 1; i < oldPages.length; i++) {\n            promise = promise.then(pages => {\n              const shouldFetchNextPage = refetchPage && oldPages[i] ? refetchPage(oldPages[i], i, oldPages) : true;\n\n              if (shouldFetchNextPage) {\n                const param = manual ? oldPageParams[i] : getNextPageParam(context.options, pages);\n                return fetchPage(pages, manual, param);\n              }\n\n              return Promise.resolve(buildNewPages(pages, oldPageParams[i], oldPages[i]));\n            });\n          }\n        }\n\n        const finalPromise = promise.then(pages => ({\n          pages,\n          pageParams: newPageParams\n        }));\n        return finalPromise;\n      };\n    }\n  };\n}\nfunction getNextPageParam(options, pages) {\n  return options.getNextPageParam == null ? void 0 : options.getNextPageParam(pages[pages.length - 1], pages);\n}\nfunction getPreviousPageParam(options, pages) {\n  return options.getPreviousPageParam == null ? void 0 : options.getPreviousPageParam(pages[0], pages);\n}\n/**\n * Checks if there is a next page.\n * Returns `undefined` if it cannot be determined.\n */\n\nfunction hasNextPage(options, pages) {\n  if (options.getNextPageParam && Array.isArray(pages)) {\n    const nextPageParam = getNextPageParam(options, pages);\n    return typeof nextPageParam !== 'undefined' && nextPageParam !== null && nextPageParam !== false;\n  }\n}\n/**\n * Checks if there is a previous page.\n * Returns `undefined` if it cannot be determined.\n */\n\nfunction hasPreviousPage(options, pages) {\n  if (options.getPreviousPageParam && Array.isArray(pages)) {\n    const previousPageParam = getPreviousPageParam(options, pages);\n    return typeof previousPageParam !== 'undefined' && previousPageParam !== null && previousPageParam !== false;\n  }\n}\n\nexport { getNextPageParam, getPreviousPageParam, hasNextPage, hasPreviousPage, infiniteQueryBehavior };\n//# sourceMappingURL=infiniteQueryBehavior.mjs.map\n","import { shallowEqualObjects, noop, isServer, isValidTimeout, timeUntilStale, replaceData } from './utils.mjs';\nimport { notifyManager } from './notifyManager.mjs';\nimport { focusManager } from './focusManager.mjs';\nimport { Subscribable } from './subscribable.mjs';\nimport { canFetch, isCancelledError } from './retryer.mjs';\n\nclass QueryObserver extends Subscribable {\n  constructor(client, options) {\n    super();\n    this.client = client;\n    this.options = options;\n    this.trackedProps = new Set();\n    this.selectError = null;\n    this.bindMethods();\n    this.setOptions(options);\n  }\n\n  bindMethods() {\n    this.remove = this.remove.bind(this);\n    this.refetch = this.refetch.bind(this);\n  }\n\n  onSubscribe() {\n    if (this.listeners.length === 1) {\n      this.currentQuery.addObserver(this);\n\n      if (shouldFetchOnMount(this.currentQuery, this.options)) {\n        this.executeFetch();\n      }\n\n      this.updateTimers();\n    }\n  }\n\n  onUnsubscribe() {\n    if (!this.listeners.length) {\n      this.destroy();\n    }\n  }\n\n  shouldFetchOnReconnect() {\n    return shouldFetchOn(this.currentQuery, this.options, this.options.refetchOnReconnect);\n  }\n\n  shouldFetchOnWindowFocus() {\n    return shouldFetchOn(this.currentQuery, this.options, this.options.refetchOnWindowFocus);\n  }\n\n  destroy() {\n    this.listeners = [];\n    this.clearStaleTimeout();\n    this.clearRefetchInterval();\n    this.currentQuery.removeObserver(this);\n  }\n\n  setOptions(options, notifyOptions) {\n    const prevOptions = this.options;\n    const prevQuery = this.currentQuery;\n    this.options = this.client.defaultQueryOptions(options);\n\n    if (!shallowEqualObjects(prevOptions, this.options)) {\n      this.client.getQueryCache().notify({\n        type: 'observerOptionsUpdated',\n        query: this.currentQuery,\n        observer: this\n      });\n    }\n\n    if (typeof this.options.enabled !== 'undefined' && typeof this.options.enabled !== 'boolean') {\n      throw new Error('Expected enabled to be a boolean');\n    } // Keep previous query key if the user does not supply one\n\n\n    if (!this.options.queryKey) {\n      this.options.queryKey = prevOptions.queryKey;\n    }\n\n    this.updateQuery();\n    const mounted = this.hasListeners(); // Fetch if there are subscribers\n\n    if (mounted && shouldFetchOptionally(this.currentQuery, prevQuery, this.options, prevOptions)) {\n      this.executeFetch();\n    } // Update result\n\n\n    this.updateResult(notifyOptions); // Update stale interval if needed\n\n    if (mounted && (this.currentQuery !== prevQuery || this.options.enabled !== prevOptions.enabled || this.options.staleTime !== prevOptions.staleTime)) {\n      this.updateStaleTimeout();\n    }\n\n    const nextRefetchInterval = this.computeRefetchInterval(); // Update refetch interval if needed\n\n    if (mounted && (this.currentQuery !== prevQuery || this.options.enabled !== prevOptions.enabled || nextRefetchInterval !== this.currentRefetchInterval)) {\n      this.updateRefetchInterval(nextRefetchInterval);\n    }\n  }\n\n  getOptimisticResult(options) {\n    const query = this.client.getQueryCache().build(this.client, options);\n    return this.createResult(query, options);\n  }\n\n  getCurrentResult() {\n    return this.currentResult;\n  }\n\n  trackResult(result) {\n    const trackedResult = {};\n    Object.keys(result).forEach(key => {\n      Object.defineProperty(trackedResult, key, {\n        configurable: false,\n        enumerable: true,\n        get: () => {\n          this.trackedProps.add(key);\n          return result[key];\n        }\n      });\n    });\n    return trackedResult;\n  }\n\n  getCurrentQuery() {\n    return this.currentQuery;\n  }\n\n  remove() {\n    this.client.getQueryCache().remove(this.currentQuery);\n  }\n\n  refetch({\n    refetchPage,\n    ...options\n  } = {}) {\n    return this.fetch({ ...options,\n      meta: {\n        refetchPage\n      }\n    });\n  }\n\n  fetchOptimistic(options) {\n    const defaultedOptions = this.client.defaultQueryOptions(options);\n    const query = this.client.getQueryCache().build(this.client, defaultedOptions);\n    query.isFetchingOptimistic = true;\n    return query.fetch().then(() => this.createResult(query, defaultedOptions));\n  }\n\n  fetch(fetchOptions) {\n    var _fetchOptions$cancelR;\n\n    return this.executeFetch({ ...fetchOptions,\n      cancelRefetch: (_fetchOptions$cancelR = fetchOptions.cancelRefetch) != null ? _fetchOptions$cancelR : true\n    }).then(() => {\n      this.updateResult();\n      return this.currentResult;\n    });\n  }\n\n  executeFetch(fetchOptions) {\n    // Make sure we reference the latest query as the current one might have been removed\n    this.updateQuery(); // Fetch\n\n    let promise = this.currentQuery.fetch(this.options, fetchOptions);\n\n    if (!(fetchOptions != null && fetchOptions.throwOnError)) {\n      promise = promise.catch(noop);\n    }\n\n    return promise;\n  }\n\n  updateStaleTimeout() {\n    this.clearStaleTimeout();\n\n    if (isServer || this.currentResult.isStale || !isValidTimeout(this.options.staleTime)) {\n      return;\n    }\n\n    const time = timeUntilStale(this.currentResult.dataUpdatedAt, this.options.staleTime); // The timeout is sometimes triggered 1 ms before the stale time expiration.\n    // To mitigate this issue we always add 1 ms to the timeout.\n\n    const timeout = time + 1;\n    this.staleTimeoutId = setTimeout(() => {\n      if (!this.currentResult.isStale) {\n        this.updateResult();\n      }\n    }, timeout);\n  }\n\n  computeRefetchInterval() {\n    var _this$options$refetch;\n\n    return typeof this.options.refetchInterval === 'function' ? this.options.refetchInterval(this.currentResult.data, this.currentQuery) : (_this$options$refetch = this.options.refetchInterval) != null ? _this$options$refetch : false;\n  }\n\n  updateRefetchInterval(nextInterval) {\n    this.clearRefetchInterval();\n    this.currentRefetchInterval = nextInterval;\n\n    if (isServer || this.options.enabled === false || !isValidTimeout(this.currentRefetchInterval) || this.currentRefetchInterval === 0) {\n      return;\n    }\n\n    this.refetchIntervalId = setInterval(() => {\n      if (this.options.refetchIntervalInBackground || focusManager.isFocused()) {\n        this.executeFetch();\n      }\n    }, this.currentRefetchInterval);\n  }\n\n  updateTimers() {\n    this.updateStaleTimeout();\n    this.updateRefetchInterval(this.computeRefetchInterval());\n  }\n\n  clearStaleTimeout() {\n    if (this.staleTimeoutId) {\n      clearTimeout(this.staleTimeoutId);\n      this.staleTimeoutId = undefined;\n    }\n  }\n\n  clearRefetchInterval() {\n    if (this.refetchIntervalId) {\n      clearInterval(this.refetchIntervalId);\n      this.refetchIntervalId = undefined;\n    }\n  }\n\n  createResult(query, options) {\n    const prevQuery = this.currentQuery;\n    const prevOptions = this.options;\n    const prevResult = this.currentResult;\n    const prevResultState = this.currentResultState;\n    const prevResultOptions = this.currentResultOptions;\n    const queryChange = query !== prevQuery;\n    const queryInitialState = queryChange ? query.state : this.currentQueryInitialState;\n    const prevQueryResult = queryChange ? this.currentResult : this.previousQueryResult;\n    const {\n      state\n    } = query;\n    let {\n      dataUpdatedAt,\n      error,\n      errorUpdatedAt,\n      fetchStatus,\n      status\n    } = state;\n    let isPreviousData = false;\n    let isPlaceholderData = false;\n    let data; // Optimistically set result in fetching state if needed\n\n    if (options._optimisticResults) {\n      const mounted = this.hasListeners();\n      const fetchOnMount = !mounted && shouldFetchOnMount(query, options);\n      const fetchOptionally = mounted && shouldFetchOptionally(query, prevQuery, options, prevOptions);\n\n      if (fetchOnMount || fetchOptionally) {\n        fetchStatus = canFetch(query.options.networkMode) ? 'fetching' : 'paused';\n\n        if (!dataUpdatedAt) {\n          status = 'loading';\n        }\n      }\n\n      if (options._optimisticResults === 'isRestoring') {\n        fetchStatus = 'idle';\n      }\n    } // Keep previous data if needed\n\n\n    if (options.keepPreviousData && !state.dataUpdateCount && prevQueryResult != null && prevQueryResult.isSuccess && status !== 'error') {\n      data = prevQueryResult.data;\n      dataUpdatedAt = prevQueryResult.dataUpdatedAt;\n      status = prevQueryResult.status;\n      isPreviousData = true;\n    } // Select data if needed\n    else if (options.select && typeof state.data !== 'undefined') {\n      // Memoize select result\n      if (prevResult && state.data === (prevResultState == null ? void 0 : prevResultState.data) && options.select === this.selectFn) {\n        data = this.selectResult;\n      } else {\n        try {\n          this.selectFn = options.select;\n          data = options.select(state.data);\n          data = replaceData(prevResult == null ? void 0 : prevResult.data, data, options);\n          this.selectResult = data;\n          this.selectError = null;\n        } catch (selectError) {\n          if (process.env.NODE_ENV !== 'production') {\n            this.client.getLogger().error(selectError);\n          }\n\n          this.selectError = selectError;\n        }\n      }\n    } // Use query data\n    else {\n      data = state.data;\n    } // Show placeholder data if needed\n\n\n    if (typeof options.placeholderData !== 'undefined' && typeof data === 'undefined' && status === 'loading') {\n      let placeholderData; // Memoize placeholder data\n\n      if (prevResult != null && prevResult.isPlaceholderData && options.placeholderData === (prevResultOptions == null ? void 0 : prevResultOptions.placeholderData)) {\n        placeholderData = prevResult.data;\n      } else {\n        placeholderData = typeof options.placeholderData === 'function' ? options.placeholderData() : options.placeholderData;\n\n        if (options.select && typeof placeholderData !== 'undefined') {\n          try {\n            placeholderData = options.select(placeholderData);\n            placeholderData = replaceData(prevResult == null ? void 0 : prevResult.data, placeholderData, options);\n            this.selectError = null;\n          } catch (selectError) {\n            if (process.env.NODE_ENV !== 'production') {\n              this.client.getLogger().error(selectError);\n            }\n\n            this.selectError = selectError;\n          }\n        }\n      }\n\n      if (typeof placeholderData !== 'undefined') {\n        status = 'success';\n        data = placeholderData;\n        isPlaceholderData = true;\n      }\n    }\n\n    if (this.selectError) {\n      error = this.selectError;\n      data = this.selectResult;\n      errorUpdatedAt = Date.now();\n      status = 'error';\n    }\n\n    const isFetching = fetchStatus === 'fetching';\n    const isLoading = status === 'loading';\n    const isError = status === 'error';\n    const result = {\n      status,\n      fetchStatus,\n      isLoading,\n      isSuccess: status === 'success',\n      isError,\n      isInitialLoading: isLoading && isFetching,\n      data,\n      dataUpdatedAt,\n      error,\n      errorUpdatedAt,\n      failureCount: state.fetchFailureCount,\n      errorUpdateCount: state.errorUpdateCount,\n      isFetched: state.dataUpdateCount > 0 || state.errorUpdateCount > 0,\n      isFetchedAfterMount: state.dataUpdateCount > queryInitialState.dataUpdateCount || state.errorUpdateCount > queryInitialState.errorUpdateCount,\n      isFetching,\n      isRefetching: isFetching && !isLoading,\n      isLoadingError: isError && state.dataUpdatedAt === 0,\n      isPaused: fetchStatus === 'paused',\n      isPlaceholderData,\n      isPreviousData,\n      isRefetchError: isError && state.dataUpdatedAt !== 0,\n      isStale: isStale(query, options),\n      refetch: this.refetch,\n      remove: this.remove\n    };\n    return result;\n  }\n\n  updateResult(notifyOptions) {\n    const prevResult = this.currentResult;\n    const nextResult = this.createResult(this.currentQuery, this.options);\n    this.currentResultState = this.currentQuery.state;\n    this.currentResultOptions = this.options; // Only notify and update result if something has changed\n\n    if (shallowEqualObjects(nextResult, prevResult)) {\n      return;\n    }\n\n    this.currentResult = nextResult; // Determine which callbacks to trigger\n\n    const defaultNotifyOptions = {\n      cache: true\n    };\n\n    const shouldNotifyListeners = () => {\n      if (!prevResult) {\n        return true;\n      }\n\n      const {\n        notifyOnChangeProps\n      } = this.options;\n\n      if (notifyOnChangeProps === 'all' || !notifyOnChangeProps && !this.trackedProps.size) {\n        return true;\n      }\n\n      const includedProps = new Set(notifyOnChangeProps != null ? notifyOnChangeProps : this.trackedProps);\n\n      if (this.options.useErrorBoundary) {\n        includedProps.add('error');\n      }\n\n      return Object.keys(this.currentResult).some(key => {\n        const typedKey = key;\n        const changed = this.currentResult[typedKey] !== prevResult[typedKey];\n        return changed && includedProps.has(typedKey);\n      });\n    };\n\n    if ((notifyOptions == null ? void 0 : notifyOptions.listeners) !== false && shouldNotifyListeners()) {\n      defaultNotifyOptions.listeners = true;\n    }\n\n    this.notify({ ...defaultNotifyOptions,\n      ...notifyOptions\n    });\n  }\n\n  updateQuery() {\n    const query = this.client.getQueryCache().build(this.client, this.options);\n\n    if (query === this.currentQuery) {\n      return;\n    }\n\n    const prevQuery = this.currentQuery;\n    this.currentQuery = query;\n    this.currentQueryInitialState = query.state;\n    this.previousQueryResult = this.currentResult;\n\n    if (this.hasListeners()) {\n      prevQuery == null ? void 0 : prevQuery.removeObserver(this);\n      query.addObserver(this);\n    }\n  }\n\n  onQueryUpdate(action) {\n    const notifyOptions = {};\n\n    if (action.type === 'success') {\n      notifyOptions.onSuccess = !action.manual;\n    } else if (action.type === 'error' && !isCancelledError(action.error)) {\n      notifyOptions.onError = true;\n    }\n\n    this.updateResult(notifyOptions);\n\n    if (this.hasListeners()) {\n      this.updateTimers();\n    }\n  }\n\n  notify(notifyOptions) {\n    notifyManager.batch(() => {\n      // First trigger the configuration callbacks\n      if (notifyOptions.onSuccess) {\n        var _this$options$onSucce, _this$options, _this$options$onSettl, _this$options2;\n\n        (_this$options$onSucce = (_this$options = this.options).onSuccess) == null ? void 0 : _this$options$onSucce.call(_this$options, this.currentResult.data);\n        (_this$options$onSettl = (_this$options2 = this.options).onSettled) == null ? void 0 : _this$options$onSettl.call(_this$options2, this.currentResult.data, null);\n      } else if (notifyOptions.onError) {\n        var _this$options$onError, _this$options3, _this$options$onSettl2, _this$options4;\n\n        (_this$options$onError = (_this$options3 = this.options).onError) == null ? void 0 : _this$options$onError.call(_this$options3, this.currentResult.error);\n        (_this$options$onSettl2 = (_this$options4 = this.options).onSettled) == null ? void 0 : _this$options$onSettl2.call(_this$options4, undefined, this.currentResult.error);\n      } // Then trigger the listeners\n\n\n      if (notifyOptions.listeners) {\n        this.listeners.forEach(listener => {\n          listener(this.currentResult);\n        });\n      } // Then the cache listeners\n\n\n      if (notifyOptions.cache) {\n        this.client.getQueryCache().notify({\n          query: this.currentQuery,\n          type: 'observerResultsUpdated'\n        });\n      }\n    });\n  }\n\n}\n\nfunction shouldLoadOnMount(query, options) {\n  return options.enabled !== false && !query.state.dataUpdatedAt && !(query.state.status === 'error' && options.retryOnMount === false);\n}\n\nfunction shouldFetchOnMount(query, options) {\n  return shouldLoadOnMount(query, options) || query.state.dataUpdatedAt > 0 && shouldFetchOn(query, options, options.refetchOnMount);\n}\n\nfunction shouldFetchOn(query, options, field) {\n  if (options.enabled !== false) {\n    const value = typeof field === 'function' ? field(query) : field;\n    return value === 'always' || value !== false && isStale(query, options);\n  }\n\n  return false;\n}\n\nfunction shouldFetchOptionally(query, prevQuery, options, prevOptions) {\n  return options.enabled !== false && (query !== prevQuery || prevOptions.enabled === false) && (!options.suspense || query.state.status !== 'error') && isStale(query, options);\n}\n\nfunction isStale(query, options) {\n  return query.isStaleByTime(options.staleTime);\n}\n\nexport { QueryObserver };\n//# sourceMappingURL=queryObserver.mjs.map\n","import { difference, replaceAt } from './utils.mjs';\nimport { notifyManager } from './notifyManager.mjs';\nimport { QueryObserver } from './queryObserver.mjs';\nimport { Subscribable } from './subscribable.mjs';\n\nclass QueriesObserver extends Subscribable {\n  constructor(client, queries) {\n    super();\n    this.client = client;\n    this.queries = [];\n    this.result = [];\n    this.observers = [];\n    this.observersMap = {};\n\n    if (queries) {\n      this.setQueries(queries);\n    }\n  }\n\n  onSubscribe() {\n    if (this.listeners.length === 1) {\n      this.observers.forEach(observer => {\n        observer.subscribe(result => {\n          this.onUpdate(observer, result);\n        });\n      });\n    }\n  }\n\n  onUnsubscribe() {\n    if (!this.listeners.length) {\n      this.destroy();\n    }\n  }\n\n  destroy() {\n    this.listeners = [];\n    this.observers.forEach(observer => {\n      observer.destroy();\n    });\n  }\n\n  setQueries(queries, notifyOptions) {\n    this.queries = queries;\n    notifyManager.batch(() => {\n      const prevObservers = this.observers;\n      const newObserverMatches = this.findMatchingObservers(this.queries); // set options for the new observers to notify of changes\n\n      newObserverMatches.forEach(match => match.observer.setOptions(match.defaultedQueryOptions, notifyOptions));\n      const newObservers = newObserverMatches.map(match => match.observer);\n      const newObserversMap = Object.fromEntries(newObservers.map(observer => [observer.options.queryHash, observer]));\n      const newResult = newObservers.map(observer => observer.getCurrentResult());\n      const hasIndexChange = newObservers.some((observer, index) => observer !== prevObservers[index]);\n\n      if (prevObservers.length === newObservers.length && !hasIndexChange) {\n        return;\n      }\n\n      this.observers = newObservers;\n      this.observersMap = newObserversMap;\n      this.result = newResult;\n\n      if (!this.hasListeners()) {\n        return;\n      }\n\n      difference(prevObservers, newObservers).forEach(observer => {\n        observer.destroy();\n      });\n      difference(newObservers, prevObservers).forEach(observer => {\n        observer.subscribe(result => {\n          this.onUpdate(observer, result);\n        });\n      });\n      this.notify();\n    });\n  }\n\n  getCurrentResult() {\n    return this.result;\n  }\n\n  getQueries() {\n    return this.observers.map(observer => observer.getCurrentQuery());\n  }\n\n  getOptimisticResult(queries) {\n    return this.findMatchingObservers(queries).map(match => match.observer.getOptimisticResult(match.defaultedQueryOptions));\n  }\n\n  findMatchingObservers(queries) {\n    const prevObservers = this.observers;\n    const defaultedQueryOptions = queries.map(options => this.client.defaultQueryOptions(options));\n    const matchingObservers = defaultedQueryOptions.flatMap(defaultedOptions => {\n      const match = prevObservers.find(observer => observer.options.queryHash === defaultedOptions.queryHash);\n\n      if (match != null) {\n        return [{\n          defaultedQueryOptions: defaultedOptions,\n          observer: match\n        }];\n      }\n\n      return [];\n    });\n    const matchedQueryHashes = matchingObservers.map(match => match.defaultedQueryOptions.queryHash);\n    const unmatchedQueries = defaultedQueryOptions.filter(defaultedOptions => !matchedQueryHashes.includes(defaultedOptions.queryHash));\n    const unmatchedObservers = prevObservers.filter(prevObserver => !matchingObservers.some(match => match.observer === prevObserver));\n\n    const getObserver = options => {\n      const defaultedOptions = this.client.defaultQueryOptions(options);\n      const currentObserver = this.observersMap[defaultedOptions.queryHash];\n      return currentObserver != null ? currentObserver : new QueryObserver(this.client, defaultedOptions);\n    };\n\n    const newOrReusedObservers = unmatchedQueries.map((options, index) => {\n      if (options.keepPreviousData) {\n        // return previous data from one of the observers that no longer match\n        const previouslyUsedObserver = unmatchedObservers[index];\n\n        if (previouslyUsedObserver !== undefined) {\n          return {\n            defaultedQueryOptions: options,\n            observer: previouslyUsedObserver\n          };\n        }\n      }\n\n      return {\n        defaultedQueryOptions: options,\n        observer: getObserver(options)\n      };\n    });\n\n    const sortMatchesByOrderOfQueries = (a, b) => defaultedQueryOptions.indexOf(a.defaultedQueryOptions) - defaultedQueryOptions.indexOf(b.defaultedQueryOptions);\n\n    return matchingObservers.concat(newOrReusedObservers).sort(sortMatchesByOrderOfQueries);\n  }\n\n  onUpdate(observer, result) {\n    const index = this.observers.indexOf(observer);\n\n    if (index !== -1) {\n      this.result = replaceAt(this.result, index, result);\n      this.notify();\n    }\n  }\n\n  notify() {\n    notifyManager.batch(() => {\n      this.listeners.forEach(listener => {\n        listener(this.result);\n      });\n    });\n  }\n\n}\n\nexport { QueriesObserver };\n//# sourceMappingURL=queriesObserver.mjs.map\n","import { QueryObserver } from './queryObserver.mjs';\nimport { infiniteQueryBehavior, hasNextPage, hasPreviousPage } from './infiniteQueryBehavior.mjs';\n\nclass InfiniteQueryObserver extends QueryObserver {\n  // Type override\n  // Type override\n  // Type override\n  // eslint-disable-next-line @typescript-eslint/no-useless-constructor\n  constructor(client, options) {\n    super(client, options);\n  }\n\n  bindMethods() {\n    super.bindMethods();\n    this.fetchNextPage = this.fetchNextPage.bind(this);\n    this.fetchPreviousPage = this.fetchPreviousPage.bind(this);\n  }\n\n  setOptions(options, notifyOptions) {\n    super.setOptions({ ...options,\n      behavior: infiniteQueryBehavior()\n    }, notifyOptions);\n  }\n\n  getOptimisticResult(options) {\n    options.behavior = infiniteQueryBehavior();\n    return super.getOptimisticResult(options);\n  }\n\n  fetchNextPage({\n    pageParam,\n    ...options\n  } = {}) {\n    return this.fetch({ ...options,\n      meta: {\n        fetchMore: {\n          direction: 'forward',\n          pageParam\n        }\n      }\n    });\n  }\n\n  fetchPreviousPage({\n    pageParam,\n    ...options\n  } = {}) {\n    return this.fetch({ ...options,\n      meta: {\n        fetchMore: {\n          direction: 'backward',\n          pageParam\n        }\n      }\n    });\n  }\n\n  createResult(query, options) {\n    var _state$data, _state$data2, _state$fetchMeta, _state$fetchMeta$fetc, _state$fetchMeta2, _state$fetchMeta2$fet;\n\n    const {\n      state\n    } = query;\n    const result = super.createResult(query, options);\n    return { ...result,\n      fetchNextPage: this.fetchNextPage,\n      fetchPreviousPage: this.fetchPreviousPage,\n      hasNextPage: hasNextPage(options, (_state$data = state.data) == null ? void 0 : _state$data.pages),\n      hasPreviousPage: hasPreviousPage(options, (_state$data2 = state.data) == null ? void 0 : _state$data2.pages),\n      isFetchingNextPage: state.fetchStatus === 'fetching' && ((_state$fetchMeta = state.fetchMeta) == null ? void 0 : (_state$fetchMeta$fetc = _state$fetchMeta.fetchMore) == null ? void 0 : _state$fetchMeta$fetc.direction) === 'forward',\n      isFetchingPreviousPage: state.fetchStatus === 'fetching' && ((_state$fetchMeta2 = state.fetchMeta) == null ? void 0 : (_state$fetchMeta2$fet = _state$fetchMeta2.fetchMore) == null ? void 0 : _state$fetchMeta2$fet.direction) === 'backward'\n    };\n  }\n\n}\n\nexport { InfiniteQueryObserver };\n//# sourceMappingURL=infiniteQueryObserver.mjs.map\n","import { getDefaultState } from './mutation.mjs';\nimport { notifyManager } from './notifyManager.mjs';\nimport { Subscribable } from './subscribable.mjs';\nimport { shallowEqualObjects } from './utils.mjs';\n\n// CLASS\nclass MutationObserver extends Subscribable {\n  constructor(client, options) {\n    super();\n    this.client = client;\n    this.setOptions(options);\n    this.bindMethods();\n    this.updateResult();\n  }\n\n  bindMethods() {\n    this.mutate = this.mutate.bind(this);\n    this.reset = this.reset.bind(this);\n  }\n\n  setOptions(options) {\n    const prevOptions = this.options;\n    this.options = this.client.defaultMutationOptions(options);\n\n    if (!shallowEqualObjects(prevOptions, this.options)) {\n      this.client.getMutationCache().notify({\n        type: 'observerOptionsUpdated',\n        mutation: this.currentMutation,\n        observer: this\n      });\n    }\n  }\n\n  onUnsubscribe() {\n    if (!this.listeners.length) {\n      var _this$currentMutation;\n\n      (_this$currentMutation = this.currentMutation) == null ? void 0 : _this$currentMutation.removeObserver(this);\n    }\n  }\n\n  onMutationUpdate(action) {\n    this.updateResult(); // Determine which callbacks to trigger\n\n    const notifyOptions = {\n      listeners: true\n    };\n\n    if (action.type === 'success') {\n      notifyOptions.onSuccess = true;\n    } else if (action.type === 'error') {\n      notifyOptions.onError = true;\n    }\n\n    this.notify(notifyOptions);\n  }\n\n  getCurrentResult() {\n    return this.currentResult;\n  }\n\n  reset() {\n    this.currentMutation = undefined;\n    this.updateResult();\n    this.notify({\n      listeners: true\n    });\n  }\n\n  mutate(variables, options) {\n    this.mutateOptions = options;\n\n    if (this.currentMutation) {\n      this.currentMutation.removeObserver(this);\n    }\n\n    this.currentMutation = this.client.getMutationCache().build(this.client, { ...this.options,\n      variables: typeof variables !== 'undefined' ? variables : this.options.variables\n    });\n    this.currentMutation.addObserver(this);\n    return this.currentMutation.execute();\n  }\n\n  updateResult() {\n    const state = this.currentMutation ? this.currentMutation.state : getDefaultState();\n    const result = { ...state,\n      isLoading: state.status === 'loading',\n      isSuccess: state.status === 'success',\n      isError: state.status === 'error',\n      isIdle: state.status === 'idle',\n      mutate: this.mutate,\n      reset: this.reset\n    };\n    this.currentResult = result;\n  }\n\n  notify(options) {\n    notifyManager.batch(() => {\n      // First trigger the mutate callbacks\n      if (this.mutateOptions) {\n        if (options.onSuccess) {\n          var _this$mutateOptions$o, _this$mutateOptions, _this$mutateOptions$o2, _this$mutateOptions2;\n\n          (_this$mutateOptions$o = (_this$mutateOptions = this.mutateOptions).onSuccess) == null ? void 0 : _this$mutateOptions$o.call(_this$mutateOptions, this.currentResult.data, this.currentResult.variables, this.currentResult.context);\n          (_this$mutateOptions$o2 = (_this$mutateOptions2 = this.mutateOptions).onSettled) == null ? void 0 : _this$mutateOptions$o2.call(_this$mutateOptions2, this.currentResult.data, null, this.currentResult.variables, this.currentResult.context);\n        } else if (options.onError) {\n          var _this$mutateOptions$o3, _this$mutateOptions3, _this$mutateOptions$o4, _this$mutateOptions4;\n\n          (_this$mutateOptions$o3 = (_this$mutateOptions3 = this.mutateOptions).onError) == null ? void 0 : _this$mutateOptions$o3.call(_this$mutateOptions3, this.currentResult.error, this.currentResult.variables, this.currentResult.context);\n          (_this$mutateOptions$o4 = (_this$mutateOptions4 = this.mutateOptions).onSettled) == null ? void 0 : _this$mutateOptions$o4.call(_this$mutateOptions4, undefined, this.currentResult.error, this.currentResult.variables, this.currentResult.context);\n        }\n      } // Then trigger the listeners\n\n\n      if (options.listeners) {\n        this.listeners.forEach(listener => {\n          listener(this.currentResult);\n        });\n      }\n    });\n  }\n\n}\n\nexport { MutationObserver };\n//# sourceMappingURL=mutationObserver.mjs.map\n","// TYPES\n// FUNCTIONS\nfunction dehydrateMutation(mutation) {\n  return {\n    mutationKey: mutation.options.mutationKey,\n    state: mutation.state\n  };\n} // Most config is not dehydrated but instead meant to configure again when\n// consuming the de/rehydrated data, typically with useQuery on the client.\n// Sometimes it might make sense to prefetch data on the server and include\n// in the html-payload, but not consume it on the initial render.\n\n\nfunction dehydrateQuery(query) {\n  return {\n    state: query.state,\n    queryKey: query.queryKey,\n    queryHash: query.queryHash\n  };\n}\n\nfunction defaultShouldDehydrateMutation(mutation) {\n  return mutation.state.isPaused;\n}\n\nfunction defaultShouldDehydrateQuery(query) {\n  return query.state.status === 'success';\n}\n\nfunction dehydrate(client, options = {}) {\n  const mutations = [];\n  const queries = [];\n\n  if (options.dehydrateMutations !== false) {\n    const shouldDehydrateMutation = options.shouldDehydrateMutation || defaultShouldDehydrateMutation;\n    client.getMutationCache().getAll().forEach(mutation => {\n      if (shouldDehydrateMutation(mutation)) {\n        mutations.push(dehydrateMutation(mutation));\n      }\n    });\n  }\n\n  if (options.dehydrateQueries !== false) {\n    const shouldDehydrateQuery = options.shouldDehydrateQuery || defaultShouldDehydrateQuery;\n    client.getQueryCache().getAll().forEach(query => {\n      if (shouldDehydrateQuery(query)) {\n        queries.push(dehydrateQuery(query));\n      }\n    });\n  }\n\n  return {\n    mutations,\n    queries\n  };\n}\nfunction hydrate(client, dehydratedState, options) {\n  if (typeof dehydratedState !== 'object' || dehydratedState === null) {\n    return;\n  }\n\n  const mutationCache = client.getMutationCache();\n  const queryCache = client.getQueryCache(); // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n\n  const mutations = dehydratedState.mutations || []; // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n\n  const queries = dehydratedState.queries || [];\n  mutations.forEach(dehydratedMutation => {\n    var _options$defaultOptio;\n\n    mutationCache.build(client, { ...(options == null ? void 0 : (_options$defaultOptio = options.defaultOptions) == null ? void 0 : _options$defaultOptio.mutations),\n      mutationKey: dehydratedMutation.mutationKey\n    }, dehydratedMutation.state);\n  });\n  queries.forEach(dehydratedQuery => {\n    var _options$defaultOptio2;\n\n    const query = queryCache.get(dehydratedQuery.queryHash); // Do not hydrate if an existing query exists with newer data\n\n    if (query) {\n      if (query.state.dataUpdatedAt < dehydratedQuery.state.dataUpdatedAt) {\n        query.setState(dehydratedQuery.state);\n      }\n\n      return;\n    } // Restore query\n\n\n    queryCache.build(client, { ...(options == null ? void 0 : (_options$defaultOptio2 = options.defaultOptions) == null ? void 0 : _options$defaultOptio2.queries),\n      queryKey: dehydratedQuery.queryKey,\n      queryHash: dehydratedQuery.queryHash\n    }, dehydratedQuery.state);\n  });\n}\n\nexport { dehydrate, hydrate };\n//# sourceMappingURL=hydration.mjs.map\n","/* eslint-disable @typescript-eslint/no-explicit-any */\nimport type { QueryKey } from '@tanstack/query-core'\nimport { isRef, unref } from 'vue-demi'\nimport type { UnwrapRef } from 'vue-demi'\n\nexport const VUE_QUERY_CLIENT = 'VUE_QUERY_CLIENT'\n\nexport function getClientKey(key?: string) {\n  const suffix = key ? `:${key}` : ''\n  return `${VUE_QUERY_CLIENT}${suffix}`\n}\n\nexport function isQueryKey(value: unknown): value is QueryKey {\n  return Array.isArray(value)\n}\n\nexport function updateState(\n  state: Record<string, unknown>,\n  update: Record<string, any>,\n): void {\n  Object.keys(state).forEach((key) => {\n    state[key] = update[key]\n  })\n}\n\nexport function cloneDeep<T>(\n  value: T,\n  customizer?: (val: unknown) => unknown | void,\n): T {\n  if (customizer) {\n    const result = customizer(value)\n    if (result !== undefined || isRef(value)) {\n      return result as typeof value\n    }\n  }\n\n  if (Array.isArray(value)) {\n    return value.map((val) => cloneDeep(val, customizer)) as typeof value\n  }\n\n  if (typeof value === 'object' && isPlainObject(value)) {\n    const entries = Object.entries(value).map(([key, val]) => [\n      key,\n      cloneDeep(val, customizer),\n    ])\n    return Object.fromEntries(entries)\n  }\n\n  return value\n}\n\nexport function cloneDeepUnref<T>(obj: T): UnwrapRef<T> {\n  return cloneDeep(obj, (val) => {\n    if (isRef(val)) {\n      return cloneDeepUnref(unref(val))\n    }\n  }) as UnwrapRef<typeof obj>\n}\n\nfunction isPlainObject(value: unknown): value is Object {\n  if (Object.prototype.toString.call(value) !== '[object Object]') {\n    return false\n  }\n\n  const prototype = Object.getPrototypeOf(value)\n  return prototype === null || prototype === Object.prototype\n}\n","import { getCurrentInstance, inject } from 'vue-demi'\n\nimport type { QueryClient } from './queryClient'\nimport { getClientKey } from './utils'\n\nexport function useQueryClient(id = ''): QueryClient {\n  const vm = getCurrentInstance()?.proxy\n\n  if (!vm) {\n    throw new Error('vue-query hooks can only be used inside setup() function.')\n  }\n\n  const key = getClientKey(id)\n  const queryClient = inject<QueryClient>(key)\n\n  if (!queryClient) {\n    throw new Error(\n      \"No 'queryClient' found in Vue context, use 'VueQueryPlugin' to properly initialize the library.\",\n    )\n  }\n\n  return queryClient\n}\n","import { QueryCache as QC } from '@tanstack/query-core'\nimport type { Query, QueryKey, QueryFilters } from '@tanstack/query-core'\nimport type { MaybeRefDeep } from './types'\nimport { cloneDeepUnref, isQueryKey } from './utils'\n\nexport class QueryCache extends QC {\n  find<TQueryFnData = unknown, TError = unknown, TData = TQueryFnData>(\n    arg1: MaybeRefDeep<QueryKey>,\n    arg2?: MaybeRefDeep<QueryFilters>,\n  ): Query<TQueryFnData, TError, TData> | undefined {\n    const arg1Unreffed = cloneDeepUnref(arg1)\n    const arg2Unreffed = cloneDeepUnref(arg2) as QueryFilters\n    return super.find(arg1Unreffed, arg2Unreffed)\n  }\n\n  findAll(\n    queryKey?: MaybeRefDeep<QueryKey>,\n    filters?: MaybeRefDeep<QueryFilters>,\n  ): Query[]\n  findAll(filters?: MaybeRefDeep<QueryFilters>): Query[]\n  findAll(\n    arg1?: MaybeRefDeep<QueryKey | QueryFilters>,\n    arg2?: MaybeRefDeep<QueryFilters>,\n  ): Query[]\n  findAll(\n    arg1?: MaybeRefDeep<QueryKey> | MaybeRefDeep<QueryFilters>,\n    arg2?: MaybeRefDeep<QueryFilters>,\n  ): Query[] {\n    const arg1Unreffed = cloneDeepUnref(arg1) as QueryKey | QueryFilters\n    const arg2Unreffed = cloneDeepUnref(arg2) as QueryFilters\n    if (isQueryKey(arg1Unreffed)) {\n      return super.findAll(arg1Unreffed, arg2Unreffed)\n    }\n    return super.findAll(arg1Unreffed)\n  }\n}\n","import { MutationCache as MC } from '@tanstack/query-core'\nimport type { Mutation, MutationFilters } from '@tanstack/query-core'\nimport type { MaybeRefDeep } from './types'\nimport { cloneDeepUnref } from './utils'\n\nexport class MutationCache extends MC {\n  find<TData = unknown, TError = unknown, TVariables = any, TContext = unknown>(\n    filters: MaybeRefDeep<MutationFilters>,\n  ): Mutation<TData, TError, TVariables, TContext> | undefined {\n    return super.find(cloneDeepUnref(filters) as MutationFilters)\n  }\n\n  findAll(filters: MaybeRefDeep<MutationFilters>): Mutation[] {\n    return super.findAll(cloneDeepUnref(filters) as MutationFilters)\n  }\n}\n","import { QueryClient as QC } from '@tanstack/query-core'\nimport type {\n  QueryKey,\n  QueryClientConfig,\n  SetDataOptions,\n  ResetQueryFilters,\n  ResetOptions,\n  CancelOptions,\n  InvalidateQueryFilters,\n  InvalidateOptions,\n  RefetchQueryFilters,\n  RefetchOptions,\n  FetchQueryOptions,\n  QueryFunction,\n  FetchInfiniteQueryOptions,\n  InfiniteData,\n  DefaultOptions,\n  QueryObserverOptions,\n  MutationKey,\n  MutationObserverOptions,\n  QueryFilters,\n  MutationFilters,\n  QueryState,\n  Updater,\n} from '@tanstack/query-core'\nimport type { MaybeRefDeep } from './types'\nimport { cloneDeepUnref, isQueryKey } from './utils'\nimport { QueryCache } from './queryCache'\nimport { MutationCache } from './mutationCache'\n\nexport class QueryClient extends QC {\n  constructor(config: MaybeRefDeep<QueryClientConfig> = {}) {\n    const unreffedConfig = cloneDeepUnref(config) as QueryClientConfig\n    const vueQueryConfig: QueryClientConfig = {\n      logger: cloneDeepUnref(unreffedConfig.logger),\n      defaultOptions: cloneDeepUnref(unreffedConfig.defaultOptions),\n      queryCache: unreffedConfig.queryCache || new QueryCache(),\n      mutationCache: unreffedConfig.mutationCache || new MutationCache(),\n    }\n    super(vueQueryConfig)\n  }\n\n  isFetching(filters?: MaybeRefDeep<QueryFilters>): number\n  isFetching(\n    queryKey?: MaybeRefDeep<QueryKey>,\n    filters?: MaybeRefDeep<QueryFilters>,\n  ): number\n  isFetching(\n    arg1?: MaybeRefDeep<QueryFilters | QueryKey>,\n    arg2?: MaybeRefDeep<QueryFilters>,\n  ): number {\n    const arg1Unreffed = cloneDeepUnref(arg1)\n    const arg2Unreffed = cloneDeepUnref(arg2) as QueryFilters\n    if (isQueryKey(arg1Unreffed)) {\n      return super.isFetching(arg1Unreffed, arg2Unreffed)\n    }\n    return super.isFetching(arg1Unreffed as QueryFilters)\n  }\n\n  isMutating(filters?: MaybeRefDeep<MutationFilters>): number {\n    return super.isMutating(cloneDeepUnref(filters) as MutationFilters)\n  }\n\n  getQueryData<TData = unknown>(\n    queryKey: MaybeRefDeep<QueryKey>,\n    filters?: MaybeRefDeep<QueryFilters>,\n  ): TData | undefined {\n    return super.getQueryData(\n      cloneDeepUnref(queryKey),\n      cloneDeepUnref(filters) as QueryFilters,\n    )\n  }\n\n  getQueriesData<TData = unknown>(\n    queryKey: MaybeRefDeep<QueryKey>,\n  ): [QueryKey, TData | undefined][]\n  getQueriesData<TData = unknown>(\n    filters: MaybeRefDeep<QueryFilters>,\n  ): [QueryKey, TData | undefined][]\n  getQueriesData<TData = unknown>(\n    queryKeyOrFilters: MaybeRefDeep<QueryKey> | MaybeRefDeep<QueryFilters>,\n  ): [QueryKey, TData | undefined][] {\n    const unreffed = cloneDeepUnref(queryKeyOrFilters)\n    if (isQueryKey(unreffed)) {\n      return super.getQueriesData(unreffed)\n    }\n    return super.getQueriesData(unreffed as QueryFilters)\n  }\n\n  setQueryData<TData>(\n    queryKey: MaybeRefDeep<QueryKey>,\n    updater: Updater<TData | undefined, TData | undefined>,\n    options?: MaybeRefDeep<SetDataOptions>,\n  ): TData | undefined {\n    return super.setQueryData(\n      cloneDeepUnref(queryKey),\n      updater,\n      cloneDeepUnref(options) as SetDataOptions,\n    )\n  }\n\n  setQueriesData<TData>(\n    queryKey: MaybeRefDeep<QueryKey>,\n    updater: Updater<TData | undefined, TData | undefined>,\n    options?: MaybeRefDeep<SetDataOptions>,\n  ): [QueryKey, TData | undefined][]\n  setQueriesData<TData>(\n    filters: MaybeRefDeep<QueryFilters>,\n    updater: Updater<TData | undefined, TData | undefined>,\n    options?: MaybeRefDeep<SetDataOptions>,\n  ): [QueryKey, TData | undefined][]\n  setQueriesData<TData>(\n    queryKeyOrFilters: MaybeRefDeep<QueryKey | QueryFilters>,\n    updater: Updater<TData | undefined, TData | undefined>,\n    options?: MaybeRefDeep<SetDataOptions>,\n  ): [QueryKey, TData | undefined][] {\n    const arg1Unreffed = cloneDeepUnref(queryKeyOrFilters)\n    const arg3Unreffed = cloneDeepUnref(options) as SetDataOptions\n    if (isQueryKey(arg1Unreffed)) {\n      return super.setQueriesData(arg1Unreffed, updater, arg3Unreffed)\n    }\n    return super.setQueriesData(\n      arg1Unreffed as QueryFilters,\n      updater,\n      arg3Unreffed,\n    )\n  }\n\n  getQueryState<TData = unknown, TError = undefined>(\n    queryKey: MaybeRefDeep<QueryKey>,\n    filters?: MaybeRefDeep<QueryFilters>,\n  ): QueryState<TData, TError> | undefined {\n    return super.getQueryState(\n      cloneDeepUnref(queryKey),\n      cloneDeepUnref(filters) as QueryFilters,\n    )\n  }\n\n  removeQueries(filters?: MaybeRefDeep<QueryFilters>): void\n  removeQueries(\n    queryKey?: MaybeRefDeep<QueryKey>,\n    filters?: MaybeRefDeep<QueryFilters>,\n  ): void\n  removeQueries(\n    arg1?: MaybeRefDeep<QueryKey | QueryFilters>,\n    arg2?: MaybeRefDeep<QueryFilters>,\n  ): void {\n    const arg1Unreffed = cloneDeepUnref(arg1)\n    if (isQueryKey(arg1Unreffed)) {\n      return super.removeQueries(\n        arg1Unreffed,\n        cloneDeepUnref(arg2) as QueryFilters,\n      )\n    }\n    return super.removeQueries(arg1Unreffed as QueryFilters)\n  }\n\n  resetQueries<TPageData = unknown>(\n    filters?: MaybeRefDeep<ResetQueryFilters<TPageData>>,\n    options?: MaybeRefDeep<ResetOptions>,\n  ): Promise<void>\n  resetQueries<TPageData = unknown>(\n    queryKey?: MaybeRefDeep<QueryKey>,\n    filters?: MaybeRefDeep<ResetQueryFilters<TPageData>>,\n    options?: MaybeRefDeep<ResetOptions>,\n  ): Promise<void>\n  resetQueries<TPageData = unknown>(\n    arg1?: MaybeRefDeep<QueryKey | ResetQueryFilters<TPageData>>,\n    arg2?: MaybeRefDeep<ResetQueryFilters<TPageData> | ResetOptions>,\n    arg3?: MaybeRefDeep<ResetOptions>,\n  ): Promise<void> {\n    const arg1Unreffed = cloneDeepUnref(arg1)\n    const arg2Unreffed = cloneDeepUnref(arg2)\n    if (isQueryKey(arg1Unreffed)) {\n      return super.resetQueries(\n        arg1Unreffed,\n        arg2Unreffed as ResetQueryFilters<TPageData> | undefined,\n        cloneDeepUnref(arg3) as ResetOptions,\n      )\n    }\n    return super.resetQueries(\n      arg1Unreffed as ResetQueryFilters<TPageData>,\n      arg2Unreffed as ResetOptions,\n    )\n  }\n\n  cancelQueries(\n    filters?: MaybeRefDeep<QueryFilters>,\n    options?: MaybeRefDeep<CancelOptions>,\n  ): Promise<void>\n  cancelQueries(\n    queryKey?: MaybeRefDeep<QueryKey>,\n    filters?: MaybeRefDeep<QueryFilters>,\n    options?: MaybeRefDeep<CancelOptions>,\n  ): Promise<void>\n  cancelQueries(\n    arg1?: MaybeRefDeep<QueryKey | QueryFilters>,\n    arg2?: MaybeRefDeep<QueryFilters | CancelOptions>,\n    arg3?: MaybeRefDeep<CancelOptions>,\n  ): Promise<void> {\n    const arg1Unreffed = cloneDeepUnref(arg1)\n    const arg2Unreffed = cloneDeepUnref(arg2)\n    if (isQueryKey(arg1Unreffed)) {\n      return super.cancelQueries(\n        arg1Unreffed,\n        arg2Unreffed as QueryFilters | undefined,\n        cloneDeepUnref(arg3) as CancelOptions,\n      )\n    }\n    return super.cancelQueries(\n      arg1Unreffed as QueryFilters,\n      arg2Unreffed as CancelOptions,\n    )\n  }\n\n  invalidateQueries<TPageData = unknown>(\n    filters?: MaybeRefDeep<InvalidateQueryFilters<TPageData>>,\n    options?: MaybeRefDeep<InvalidateOptions>,\n  ): Promise<void>\n  invalidateQueries<TPageData = unknown>(\n    queryKey?: MaybeRefDeep<QueryKey>,\n    filters?: MaybeRefDeep<InvalidateQueryFilters<TPageData>>,\n    options?: MaybeRefDeep<InvalidateOptions>,\n  ): Promise<void>\n  invalidateQueries<TPageData = unknown>(\n    arg1?: MaybeRefDeep<QueryKey | InvalidateQueryFilters<TPageData>>,\n    arg2?: MaybeRefDeep<InvalidateQueryFilters<TPageData> | InvalidateOptions>,\n    arg3?: MaybeRefDeep<InvalidateOptions>,\n  ): Promise<void> {\n    const arg1Unreffed = cloneDeepUnref(arg1)\n    const arg2Unreffed = cloneDeepUnref(arg2)\n    if (isQueryKey(arg1Unreffed)) {\n      return super.invalidateQueries(\n        arg1Unreffed,\n        arg2Unreffed as InvalidateQueryFilters | undefined,\n        cloneDeepUnref(arg3) as InvalidateOptions,\n      )\n    }\n    return super.invalidateQueries(\n      arg1Unreffed as InvalidateQueryFilters<TPageData>,\n      arg2Unreffed as InvalidateOptions,\n    )\n  }\n\n  refetchQueries<TPageData = unknown>(\n    filters?: MaybeRefDeep<RefetchQueryFilters<TPageData>>,\n    options?: MaybeRefDeep<RefetchOptions>,\n  ): Promise<void>\n  refetchQueries<TPageData = unknown>(\n    queryKey?: MaybeRefDeep<QueryKey>,\n    filters?: MaybeRefDeep<RefetchQueryFilters<TPageData>>,\n    options?: MaybeRefDeep<RefetchOptions>,\n  ): Promise<void>\n  refetchQueries<TPageData = unknown>(\n    arg1?: MaybeRefDeep<QueryKey | RefetchQueryFilters<TPageData>>,\n    arg2?: MaybeRefDeep<RefetchQueryFilters<TPageData> | RefetchOptions>,\n    arg3?: MaybeRefDeep<RefetchOptions>,\n  ): Promise<void> {\n    const arg1Unreffed = cloneDeepUnref(arg1)\n    const arg2Unreffed = cloneDeepUnref(arg2)\n    if (isQueryKey(arg1Unreffed)) {\n      return super.refetchQueries(\n        arg1Unreffed,\n        arg2Unreffed as RefetchQueryFilters | undefined,\n        cloneDeepUnref(arg3) as RefetchOptions,\n      )\n    }\n    return super.refetchQueries(\n      arg1Unreffed as RefetchQueryFilters<TPageData>,\n      arg2Unreffed as RefetchOptions,\n    )\n  }\n\n  fetchQuery<\n    TQueryFnData = unknown,\n    TError = unknown,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey,\n  >(\n    options: MaybeRefDeep<\n      FetchQueryOptions<TQueryFnData, TError, TData, TQueryKey>\n    >,\n  ): Promise<TData>\n  fetchQuery<\n    TQueryFnData = unknown,\n    TError = unknown,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey,\n  >(\n    queryKey: MaybeRefDeep<TQueryKey>,\n    options?: MaybeRefDeep<\n      FetchQueryOptions<TQueryFnData, TError, TData, TQueryKey>\n    >,\n  ): Promise<TData>\n  fetchQuery<\n    TQueryFnData = unknown,\n    TError = unknown,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey,\n  >(\n    queryKey: MaybeRefDeep<TQueryKey>,\n    queryFn: QueryFunction<TQueryFnData, TQueryKey>,\n    options?: MaybeRefDeep<\n      FetchQueryOptions<TQueryFnData, TError, TData, TQueryKey>\n    >,\n  ): Promise<TData>\n  fetchQuery<\n    TQueryFnData,\n    TError,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey,\n  >(\n    arg1:\n      | MaybeRefDeep<TQueryKey>\n      | MaybeRefDeep<FetchQueryOptions<TQueryFnData, TError, TData, TQueryKey>>,\n    arg2?:\n      | QueryFunction<TQueryFnData, TQueryKey>\n      | MaybeRefDeep<FetchQueryOptions<TQueryFnData, TError, TData, TQueryKey>>,\n    arg3?: MaybeRefDeep<\n      FetchQueryOptions<TQueryFnData, TError, TData, TQueryKey>\n    >,\n  ): Promise<TData> {\n    const arg1Unreffed = cloneDeepUnref(arg1)\n    const arg2Unreffed = cloneDeepUnref(arg2)\n    if (isQueryKey(arg1Unreffed)) {\n      return super.fetchQuery(\n        arg1Unreffed as TQueryKey,\n        arg2Unreffed as QueryFunction<TQueryFnData, TQueryKey>,\n        cloneDeepUnref(arg3) as FetchQueryOptions<\n          TQueryFnData,\n          TError,\n          TData,\n          TQueryKey\n        >,\n      )\n    }\n    return super.fetchQuery(\n      arg1Unreffed as FetchQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n    )\n  }\n\n  prefetchQuery<\n    TQueryFnData = unknown,\n    TError = unknown,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey,\n  >(\n    options: MaybeRefDeep<\n      FetchQueryOptions<TQueryFnData, TError, TData, TQueryKey>\n    >,\n  ): Promise<void>\n  prefetchQuery<\n    TQueryFnData = unknown,\n    TError = unknown,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey,\n  >(\n    queryKey: MaybeRefDeep<TQueryKey>,\n    options?: MaybeRefDeep<\n      FetchQueryOptions<TQueryFnData, TError, TData, TQueryKey>\n    >,\n  ): Promise<void>\n  prefetchQuery<\n    TQueryFnData = unknown,\n    TError = unknown,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey,\n  >(\n    queryKey: MaybeRefDeep<TQueryKey>,\n    queryFn: QueryFunction<TQueryFnData, TQueryKey>,\n    options?: MaybeRefDeep<\n      FetchQueryOptions<TQueryFnData, TError, TData, TQueryKey>\n    >,\n  ): Promise<void>\n  prefetchQuery<\n    TQueryFnData = unknown,\n    TError = unknown,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey,\n  >(\n    arg1: MaybeRefDeep<\n      TQueryKey | FetchQueryOptions<TQueryFnData, TError, TData, TQueryKey>\n    >,\n    arg2?:\n      | QueryFunction<TQueryFnData, TQueryKey>\n      | MaybeRefDeep<FetchQueryOptions<TQueryFnData, TError, TData, TQueryKey>>,\n    arg3?: MaybeRefDeep<\n      FetchQueryOptions<TQueryFnData, TError, TData, TQueryKey>\n    >,\n  ): Promise<void> {\n    return super.prefetchQuery(\n      cloneDeepUnref(arg1) as any,\n      cloneDeepUnref(arg2) as any,\n      cloneDeepUnref(arg3) as any,\n    )\n  }\n\n  fetchInfiniteQuery<\n    TQueryFnData = unknown,\n    TError = unknown,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey,\n  >(\n    options: MaybeRefDeep<\n      FetchInfiniteQueryOptions<TQueryFnData, TError, TData, TQueryKey>\n    >,\n  ): Promise<InfiniteData<TData>>\n  fetchInfiniteQuery<\n    TQueryFnData = unknown,\n    TError = unknown,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey,\n  >(\n    queryKey: MaybeRefDeep<TQueryKey>,\n    options?: MaybeRefDeep<\n      FetchInfiniteQueryOptions<TQueryFnData, TError, TData, TQueryKey>\n    >,\n  ): Promise<InfiniteData<TData>>\n  fetchInfiniteQuery<\n    TQueryFnData = unknown,\n    TError = unknown,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey,\n  >(\n    queryKey: MaybeRefDeep<TQueryKey>,\n    queryFn: QueryFunction<TQueryFnData, TQueryKey>,\n    options?: MaybeRefDeep<\n      FetchInfiniteQueryOptions<TQueryFnData, TError, TData, TQueryKey>\n    >,\n  ): Promise<InfiniteData<TData>>\n  fetchInfiniteQuery<\n    TQueryFnData,\n    TError,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey,\n  >(\n    arg1: MaybeRefDeep<\n      | TQueryKey\n      | FetchInfiniteQueryOptions<TQueryFnData, TError, TData, TQueryKey>\n    >,\n    arg2?:\n      | QueryFunction<TQueryFnData, TQueryKey>\n      | MaybeRefDeep<\n          FetchInfiniteQueryOptions<TQueryFnData, TError, TData, TQueryKey>\n        >,\n    arg3?: MaybeRefDeep<\n      FetchInfiniteQueryOptions<TQueryFnData, TError, TData, TQueryKey>\n    >,\n  ): Promise<InfiniteData<TData>> {\n    const arg1Unreffed = cloneDeepUnref(arg1)\n    const arg2Unreffed = cloneDeepUnref(arg2)\n    if (isQueryKey(arg1Unreffed)) {\n      return super.fetchInfiniteQuery(\n        arg1Unreffed as TQueryKey,\n        arg2Unreffed as QueryFunction<TQueryFnData, TQueryKey>,\n        cloneDeepUnref(arg3) as FetchInfiniteQueryOptions<\n          TQueryFnData,\n          TError,\n          TData,\n          TQueryKey\n        >,\n      )\n    }\n    return super.fetchInfiniteQuery(\n      arg1Unreffed as FetchInfiniteQueryOptions<\n        TQueryFnData,\n        TError,\n        TData,\n        TQueryKey\n      >,\n    )\n  }\n\n  prefetchInfiniteQuery<\n    TQueryFnData = unknown,\n    TError = unknown,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey,\n  >(\n    options: MaybeRefDeep<\n      FetchInfiniteQueryOptions<TQueryFnData, TError, TData, TQueryKey>\n    >,\n  ): Promise<void>\n  prefetchInfiniteQuery<\n    TQueryFnData = unknown,\n    TError = unknown,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey,\n  >(\n    queryKey: MaybeRefDeep<TQueryKey>,\n    options?: MaybeRefDeep<\n      FetchInfiniteQueryOptions<TQueryFnData, TError, TData, TQueryKey>\n    >,\n  ): Promise<void>\n  prefetchInfiniteQuery<\n    TQueryFnData = unknown,\n    TError = unknown,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey,\n  >(\n    queryKey: MaybeRefDeep<TQueryKey>,\n    queryFn: QueryFunction<TQueryFnData, TQueryKey>,\n    options?: MaybeRefDeep<\n      FetchInfiniteQueryOptions<TQueryFnData, TError, TData, TQueryKey>\n    >,\n  ): Promise<void>\n  prefetchInfiniteQuery<\n    TQueryFnData,\n    TError,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey,\n  >(\n    arg1: MaybeRefDeep<\n      | TQueryKey\n      | FetchInfiniteQueryOptions<TQueryFnData, TError, TData, TQueryKey>\n    >,\n    arg2?:\n      | QueryFunction<TQueryFnData, TQueryKey>\n      | MaybeRefDeep<\n          FetchInfiniteQueryOptions<TQueryFnData, TError, TData, TQueryKey>\n        >,\n    arg3?: MaybeRefDeep<\n      FetchInfiniteQueryOptions<TQueryFnData, TError, TData, TQueryKey>\n    >,\n  ): Promise<void> {\n    return super.prefetchInfiniteQuery(\n      cloneDeepUnref(arg1) as any,\n      cloneDeepUnref(arg2) as any,\n      cloneDeepUnref(arg3) as any,\n    )\n  }\n\n  setDefaultOptions(options: MaybeRefDeep<DefaultOptions>): void {\n    super.setDefaultOptions(cloneDeepUnref(options) as DefaultOptions)\n  }\n\n  setQueryDefaults(\n    queryKey: MaybeRefDeep<QueryKey>,\n    options: MaybeRefDeep<QueryObserverOptions<any, any, any, any>>,\n  ): void {\n    super.setQueryDefaults(\n      cloneDeepUnref(queryKey),\n      cloneDeepUnref(options) as any,\n    )\n  }\n\n  getQueryDefaults(\n    queryKey?: MaybeRefDeep<QueryKey>,\n  ): QueryObserverOptions<any, any, any, any, any> | undefined {\n    return super.getQueryDefaults(cloneDeepUnref(queryKey))\n  }\n\n  setMutationDefaults(\n    mutationKey: MaybeRefDeep<MutationKey>,\n    options: MaybeRefDeep<MutationObserverOptions<any, any, any, any>>,\n  ): void {\n    super.setMutationDefaults(\n      cloneDeepUnref(mutationKey),\n      cloneDeepUnref(options) as any,\n    )\n  }\n\n  getMutationDefaults(\n    mutationKey?: MaybeRefDeep<MutationKey>,\n  ): MutationObserverOptions<any, any, any, any> | undefined {\n    return super.getMutationDefaults(cloneDeepUnref(mutationKey))\n  }\n}\n","import { parseFilterArgs, functionalUpdate, parseQueryArgs, noop, hashQueryKey, partialMatchKey, hashQueryKeyByOptions } from './utils.mjs';\nimport { QueryCache } from './queryCache.mjs';\nimport { MutationCache } from './mutationCache.mjs';\nimport { focusManager } from './focusManager.mjs';\nimport { onlineManager } from './onlineManager.mjs';\nimport { notifyManager } from './notifyManager.mjs';\nimport { infiniteQueryBehavior } from './infiniteQueryBehavior.mjs';\nimport { defaultLogger } from './logger.mjs';\n\n// CLASS\nclass QueryClient {\n  constructor(config = {}) {\n    this.queryCache = config.queryCache || new QueryCache();\n    this.mutationCache = config.mutationCache || new MutationCache();\n    this.logger = config.logger || defaultLogger;\n    this.defaultOptions = config.defaultOptions || {};\n    this.queryDefaults = [];\n    this.mutationDefaults = [];\n  }\n\n  mount() {\n    this.unsubscribeFocus = focusManager.subscribe(() => {\n      if (focusManager.isFocused()) {\n        this.resumePausedMutations();\n        this.queryCache.onFocus();\n      }\n    });\n    this.unsubscribeOnline = onlineManager.subscribe(() => {\n      if (onlineManager.isOnline()) {\n        this.resumePausedMutations();\n        this.queryCache.onOnline();\n      }\n    });\n  }\n\n  unmount() {\n    var _this$unsubscribeFocu, _this$unsubscribeOnli;\n\n    (_this$unsubscribeFocu = this.unsubscribeFocus) == null ? void 0 : _this$unsubscribeFocu.call(this);\n    (_this$unsubscribeOnli = this.unsubscribeOnline) == null ? void 0 : _this$unsubscribeOnli.call(this);\n  }\n\n  isFetching(arg1, arg2) {\n    const [filters] = parseFilterArgs(arg1, arg2);\n    filters.fetchStatus = 'fetching';\n    return this.queryCache.findAll(filters).length;\n  }\n\n  isMutating(filters) {\n    return this.mutationCache.findAll({ ...filters,\n      fetching: true\n    }).length;\n  }\n\n  getQueryData(queryKey, filters) {\n    var _this$queryCache$find;\n\n    return (_this$queryCache$find = this.queryCache.find(queryKey, filters)) == null ? void 0 : _this$queryCache$find.state.data;\n  }\n\n  getQueriesData(queryKeyOrFilters) {\n    return this.getQueryCache().findAll(queryKeyOrFilters).map(({\n      queryKey,\n      state\n    }) => {\n      const data = state.data;\n      return [queryKey, data];\n    });\n  }\n\n  setQueryData(queryKey, updater, options) {\n    const query = this.queryCache.find(queryKey);\n    const prevData = query == null ? void 0 : query.state.data;\n    const data = functionalUpdate(updater, prevData);\n\n    if (typeof data === 'undefined') {\n      return undefined;\n    }\n\n    const parsedOptions = parseQueryArgs(queryKey);\n    const defaultedOptions = this.defaultQueryOptions(parsedOptions);\n    return this.queryCache.build(this, defaultedOptions).setData(data, { ...options,\n      manual: true\n    });\n  }\n\n  setQueriesData(queryKeyOrFilters, updater, options) {\n    return notifyManager.batch(() => this.getQueryCache().findAll(queryKeyOrFilters).map(({\n      queryKey\n    }) => [queryKey, this.setQueryData(queryKey, updater, options)]));\n  }\n\n  getQueryState(queryKey, filters) {\n    var _this$queryCache$find2;\n\n    return (_this$queryCache$find2 = this.queryCache.find(queryKey, filters)) == null ? void 0 : _this$queryCache$find2.state;\n  }\n\n  removeQueries(arg1, arg2) {\n    const [filters] = parseFilterArgs(arg1, arg2);\n    const queryCache = this.queryCache;\n    notifyManager.batch(() => {\n      queryCache.findAll(filters).forEach(query => {\n        queryCache.remove(query);\n      });\n    });\n  }\n\n  resetQueries(arg1, arg2, arg3) {\n    const [filters, options] = parseFilterArgs(arg1, arg2, arg3);\n    const queryCache = this.queryCache;\n    const refetchFilters = {\n      type: 'active',\n      ...filters\n    };\n    return notifyManager.batch(() => {\n      queryCache.findAll(filters).forEach(query => {\n        query.reset();\n      });\n      return this.refetchQueries(refetchFilters, options);\n    });\n  }\n\n  cancelQueries(arg1, arg2, arg3) {\n    const [filters, cancelOptions = {}] = parseFilterArgs(arg1, arg2, arg3);\n\n    if (typeof cancelOptions.revert === 'undefined') {\n      cancelOptions.revert = true;\n    }\n\n    const promises = notifyManager.batch(() => this.queryCache.findAll(filters).map(query => query.cancel(cancelOptions)));\n    return Promise.all(promises).then(noop).catch(noop);\n  }\n\n  invalidateQueries(arg1, arg2, arg3) {\n    const [filters, options] = parseFilterArgs(arg1, arg2, arg3);\n    return notifyManager.batch(() => {\n      var _ref, _filters$refetchType;\n\n      this.queryCache.findAll(filters).forEach(query => {\n        query.invalidate();\n      });\n\n      if (filters.refetchType === 'none') {\n        return Promise.resolve();\n      }\n\n      const refetchFilters = { ...filters,\n        type: (_ref = (_filters$refetchType = filters.refetchType) != null ? _filters$refetchType : filters.type) != null ? _ref : 'active'\n      };\n      return this.refetchQueries(refetchFilters, options);\n    });\n  }\n\n  refetchQueries(arg1, arg2, arg3) {\n    const [filters, options] = parseFilterArgs(arg1, arg2, arg3);\n    const promises = notifyManager.batch(() => this.queryCache.findAll(filters).filter(query => !query.isDisabled()).map(query => {\n      var _options$cancelRefetc;\n\n      return query.fetch(undefined, { ...options,\n        cancelRefetch: (_options$cancelRefetc = options == null ? void 0 : options.cancelRefetch) != null ? _options$cancelRefetc : true,\n        meta: {\n          refetchPage: filters.refetchPage\n        }\n      });\n    }));\n    let promise = Promise.all(promises).then(noop);\n\n    if (!(options != null && options.throwOnError)) {\n      promise = promise.catch(noop);\n    }\n\n    return promise;\n  }\n\n  fetchQuery(arg1, arg2, arg3) {\n    const parsedOptions = parseQueryArgs(arg1, arg2, arg3);\n    const defaultedOptions = this.defaultQueryOptions(parsedOptions); // https://github.com/tannerlinsley/react-query/issues/652\n\n    if (typeof defaultedOptions.retry === 'undefined') {\n      defaultedOptions.retry = false;\n    }\n\n    const query = this.queryCache.build(this, defaultedOptions);\n    return query.isStaleByTime(defaultedOptions.staleTime) ? query.fetch(defaultedOptions) : Promise.resolve(query.state.data);\n  }\n\n  prefetchQuery(arg1, arg2, arg3) {\n    return this.fetchQuery(arg1, arg2, arg3).then(noop).catch(noop);\n  }\n\n  fetchInfiniteQuery(arg1, arg2, arg3) {\n    const parsedOptions = parseQueryArgs(arg1, arg2, arg3);\n    parsedOptions.behavior = infiniteQueryBehavior();\n    return this.fetchQuery(parsedOptions);\n  }\n\n  prefetchInfiniteQuery(arg1, arg2, arg3) {\n    return this.fetchInfiniteQuery(arg1, arg2, arg3).then(noop).catch(noop);\n  }\n\n  resumePausedMutations() {\n    return this.mutationCache.resumePausedMutations();\n  }\n\n  getQueryCache() {\n    return this.queryCache;\n  }\n\n  getMutationCache() {\n    return this.mutationCache;\n  }\n\n  getLogger() {\n    return this.logger;\n  }\n\n  getDefaultOptions() {\n    return this.defaultOptions;\n  }\n\n  setDefaultOptions(options) {\n    this.defaultOptions = options;\n  }\n\n  setQueryDefaults(queryKey, options) {\n    const result = this.queryDefaults.find(x => hashQueryKey(queryKey) === hashQueryKey(x.queryKey));\n\n    if (result) {\n      result.defaultOptions = options;\n    } else {\n      this.queryDefaults.push({\n        queryKey,\n        defaultOptions: options\n      });\n    }\n  }\n\n  getQueryDefaults(queryKey) {\n    if (!queryKey) {\n      return undefined;\n    } // Get the first matching defaults\n\n\n    const firstMatchingDefaults = this.queryDefaults.find(x => partialMatchKey(queryKey, x.queryKey)); // Additional checks and error in dev mode\n\n    if (process.env.NODE_ENV !== 'production') {\n      // Retrieve all matching defaults for the given key\n      const matchingDefaults = this.queryDefaults.filter(x => partialMatchKey(queryKey, x.queryKey)); // It is ok not having defaults, but it is error prone to have more than 1 default for a given key\n\n      if (matchingDefaults.length > 1) {\n        this.logger.error(\"[QueryClient] Several query defaults match with key '\" + JSON.stringify(queryKey) + \"'. The first matching query defaults are used. Please check how query defaults are registered. Order does matter here. cf. https://react-query.tanstack.com/reference/QueryClient#queryclientsetquerydefaults.\");\n      }\n    }\n\n    return firstMatchingDefaults == null ? void 0 : firstMatchingDefaults.defaultOptions;\n  }\n\n  setMutationDefaults(mutationKey, options) {\n    const result = this.mutationDefaults.find(x => hashQueryKey(mutationKey) === hashQueryKey(x.mutationKey));\n\n    if (result) {\n      result.defaultOptions = options;\n    } else {\n      this.mutationDefaults.push({\n        mutationKey,\n        defaultOptions: options\n      });\n    }\n  }\n\n  getMutationDefaults(mutationKey) {\n    if (!mutationKey) {\n      return undefined;\n    } // Get the first matching defaults\n\n\n    const firstMatchingDefaults = this.mutationDefaults.find(x => partialMatchKey(mutationKey, x.mutationKey)); // Additional checks and error in dev mode\n\n    if (process.env.NODE_ENV !== 'production') {\n      // Retrieve all matching defaults for the given key\n      const matchingDefaults = this.mutationDefaults.filter(x => partialMatchKey(mutationKey, x.mutationKey)); // It is ok not having defaults, but it is error prone to have more than 1 default for a given key\n\n      if (matchingDefaults.length > 1) {\n        this.logger.error(\"[QueryClient] Several mutation defaults match with key '\" + JSON.stringify(mutationKey) + \"'. The first matching mutation defaults are used. Please check how mutation defaults are registered. Order does matter here. cf. https://react-query.tanstack.com/reference/QueryClient#queryclientsetmutationdefaults.\");\n      }\n    }\n\n    return firstMatchingDefaults == null ? void 0 : firstMatchingDefaults.defaultOptions;\n  }\n\n  defaultQueryOptions(options) {\n    if (options != null && options._defaulted) {\n      return options;\n    }\n\n    const defaultedOptions = { ...this.defaultOptions.queries,\n      ...this.getQueryDefaults(options == null ? void 0 : options.queryKey),\n      ...options,\n      _defaulted: true\n    };\n\n    if (!defaultedOptions.queryHash && defaultedOptions.queryKey) {\n      defaultedOptions.queryHash = hashQueryKeyByOptions(defaultedOptions.queryKey, defaultedOptions);\n    } // dependent default values\n\n\n    if (typeof defaultedOptions.refetchOnReconnect === 'undefined') {\n      defaultedOptions.refetchOnReconnect = defaultedOptions.networkMode !== 'always';\n    }\n\n    if (typeof defaultedOptions.useErrorBoundary === 'undefined') {\n      defaultedOptions.useErrorBoundary = !!defaultedOptions.suspense;\n    }\n\n    return defaultedOptions;\n  }\n\n  defaultMutationOptions(options) {\n    if (options != null && options._defaulted) {\n      return options;\n    }\n\n    return { ...this.defaultOptions.mutations,\n      ...this.getMutationDefaults(options == null ? void 0 : options.mutationKey),\n      ...options,\n      _defaulted: true\n    };\n  }\n\n  clear() {\n    this.queryCache.clear();\n    this.mutationCache.clear();\n  }\n\n}\n\nexport { QueryClient };\n//# sourceMappingURL=queryClient.mjs.map\n","import { isVue2 } from 'vue-demi'\nimport type { QueryClientConfig } from '@tanstack/query-core'\n\nimport { QueryClient } from './queryClient'\nimport { getClientKey } from './utils'\nimport { setupDevtools } from './devtools/devtools'\nimport type { MaybeRefDeep } from './types'\n\ndeclare global {\n  interface Window {\n    __VUE_QUERY_CONTEXT__?: QueryClient\n  }\n}\n\nexport interface AdditionalClient {\n  queryClient: QueryClient\n  queryClientKey: string\n}\n\ninterface ConfigOptions {\n  queryClientConfig?: MaybeRefDeep<QueryClientConfig>\n  queryClientKey?: string\n  contextSharing?: boolean\n}\n\ninterface ClientOptions {\n  queryClient?: QueryClient\n  queryClientKey?: string\n  contextSharing?: boolean\n}\n\nexport type VueQueryPluginOptions = ConfigOptions | ClientOptions\n\nexport const VueQueryPlugin = {\n  install: (app: any, options: VueQueryPluginOptions = {}) => {\n    const clientKey = getClientKey(options.queryClientKey)\n    let client: QueryClient\n\n    if ('queryClient' in options && options.queryClient) {\n      client = options.queryClient\n    } else {\n      if (options.contextSharing && typeof window !== 'undefined') {\n        if (!window.__VUE_QUERY_CONTEXT__) {\n          const clientConfig =\n            'queryClientConfig' in options\n              ? options.queryClientConfig\n              : undefined\n          client = new QueryClient(clientConfig)\n          window.__VUE_QUERY_CONTEXT__ = client\n        } else {\n          client = window.__VUE_QUERY_CONTEXT__\n        }\n      } else {\n        const clientConfig =\n          'queryClientConfig' in options ? options.queryClientConfig : undefined\n        client = new QueryClient(clientConfig)\n      }\n    }\n\n    client.mount()\n\n    const cleanup = () => {\n      client.unmount()\n    }\n\n    if (app.onUnmount) {\n      app.onUnmount(cleanup)\n    } else {\n      const originalUnmount = app.unmount\n      app.unmount = function vueQueryUnmount() {\n        cleanup()\n        originalUnmount()\n      }\n    }\n\n    /* istanbul ignore next */\n    if (isVue2) {\n      app.mixin({\n        beforeCreate() {\n          // HACK: taken from provide(): https://github.com/vuejs/composition-api/blob/master/src/apis/inject.ts#L30\n          if (!this._provided) {\n            const provideCache = {}\n            Object.defineProperty(this, '_provided', {\n              get: () => provideCache,\n              set: (v) => Object.assign(provideCache, v),\n            })\n          }\n\n          this._provided[clientKey] = client\n\n          if (process.env.NODE_ENV === 'development') {\n            if (this === this.$root) {\n              setupDevtools(this, client)\n            }\n          }\n        },\n      })\n    } else {\n      app.provide(clientKey, client)\n\n      if (process.env.NODE_ENV === 'development') {\n        setupDevtools(app, client)\n      }\n    }\n  },\n}\n","import { onScopeDispose, toRefs, readonly, reactive, watch } from 'vue-demi'\nimport type { ToRefs, UnwrapRef } from 'vue-demi'\nimport type {\n  QueryObserver,\n  QueryKey,\n  QueryObserverOptions,\n  QueryObserverResult,\n  QueryFunction,\n} from '@tanstack/query-core'\nimport { useQueryClient } from './useQueryClient'\nimport { updateState, isQueryKey, cloneDeepUnref } from './utils'\nimport type { WithQueryClientKey } from './types'\nimport type { UseQueryOptions } from './useQuery'\nimport type { UseInfiniteQueryOptions } from './useInfiniteQuery'\n\nexport type UseQueryReturnType<\n  TData,\n  TError,\n  Result = QueryObserverResult<TData, TError>,\n> = ToRefs<Readonly<Result>> & {\n  suspense: () => Promise<Result>\n}\n\ntype UseQueryOptionsGeneric<\n  TQueryFnData,\n  TError,\n  TData,\n  TQueryKey extends QueryKey = QueryKey,\n> =\n  | UseQueryOptions<TQueryFnData, TError, TData, TQueryKey>\n  | UseInfiniteQueryOptions<TQueryFnData, TError, TData, TQueryKey>\n\nexport function useBaseQuery<\n  TQueryFnData,\n  TError,\n  TData,\n  TQueryData,\n  TQueryKey extends QueryKey,\n>(\n  Observer: typeof QueryObserver,\n  arg1:\n    | TQueryKey\n    | UseQueryOptionsGeneric<TQueryFnData, TError, TData, TQueryKey>,\n  arg2:\n    | QueryFunction<TQueryFnData, UnwrapRef<TQueryKey>>\n    | UseQueryOptionsGeneric<TQueryFnData, TError, TData, TQueryKey> = {},\n  arg3: UseQueryOptionsGeneric<TQueryFnData, TError, TData, TQueryKey> = {},\n): UseQueryReturnType<TData, TError> {\n  const options = getQueryUnreffedOptions()\n  const queryClient =\n    options.queryClient ?? useQueryClient(options.queryClientKey)\n  const defaultedOptions = queryClient.defaultQueryOptions(options)\n  const observer = new Observer(queryClient, defaultedOptions)\n  const state = reactive(observer.getCurrentResult())\n  const unsubscribe = observer.subscribe((result) => {\n    updateState(state, result)\n  })\n\n  watch(\n    [() => arg1, () => arg2, () => arg3],\n    () => {\n      observer.setOptions(\n        queryClient.defaultQueryOptions(getQueryUnreffedOptions()),\n      )\n    },\n    { deep: true },\n  )\n\n  onScopeDispose(() => {\n    unsubscribe()\n  })\n\n  const suspense = () => {\n    return new Promise<QueryObserverResult<TData, TError>>((resolve) => {\n      const run = () => {\n        const newOptions = queryClient.defaultQueryOptions(\n          getQueryUnreffedOptions(),\n        )\n        if (newOptions.enabled !== false) {\n          const optimisticResult = observer.getOptimisticResult(newOptions)\n          if (optimisticResult.isStale) {\n            resolve(observer.fetchOptimistic(defaultedOptions))\n          } else {\n            resolve(optimisticResult)\n          }\n        }\n      }\n\n      run()\n\n      watch([() => arg1, () => arg2, () => arg3], run, { deep: true })\n    })\n  }\n\n  return {\n    ...(toRefs(readonly(state)) as UseQueryReturnType<TData, TError>),\n    suspense,\n  }\n\n  /**\n   * Get Query Options object\n   * All inner refs unwrapped. No Reactivity\n   */\n  function getQueryUnreffedOptions() {\n    let mergedOptions\n\n    if (!isQueryKey(arg1)) {\n      // `useQuery(optionsObj)`\n      mergedOptions = arg1\n    } else if (typeof arg2 === 'function') {\n      // `useQuery(queryKey, queryFn, optionsObj?)`\n      mergedOptions = { ...arg3, queryKey: arg1, queryFn: arg2 }\n    } else {\n      // `useQuery(queryKey, optionsObj?)`\n      mergedOptions = { ...arg2, queryKey: arg1 }\n    }\n\n    return cloneDeepUnref(mergedOptions) as WithQueryClientKey<\n      QueryObserverOptions<TQueryFnData, TError, TData, TQueryData, TQueryKey>\n    >\n  }\n}\n","import { onScopeDispose, reactive, readonly, toRefs, watch } from 'vue-demi'\nimport type { ToRefs } from 'vue-demi'\nimport { MutationObserver } from '@tanstack/query-core'\nimport type {\n  MutateOptions,\n  MutationFunction,\n  MutationKey,\n  MutationObserverOptions,\n  MutateFunction,\n  MutationObserverResult,\n} from '@tanstack/query-core'\nimport { cloneDeepUnref, isQueryKey, updateState } from './utils'\nimport { useQueryClient } from './useQueryClient'\nimport type { WithQueryClientKey } from './types'\n\ntype MutationResult<TData, TError, TVariables, TContext> = Omit<\n  MutationObserverResult<TData, TError, TVariables, TContext>,\n  'mutate' | 'reset'\n>\n\nexport type UseMutationOptions<TData, TError, TVariables, TContext> =\n  WithQueryClientKey<\n    MutationObserverOptions<TData, TError, TVariables, TContext>\n  >\n\ntype MutateSyncFunction<\n  TData = unknown,\n  TError = unknown,\n  TVariables = void,\n  TContext = unknown,\n> = (\n  ...options: Parameters<MutateFunction<TData, TError, TVariables, TContext>>\n) => void\n\nexport type UseMutationReturnType<\n  TData,\n  TError,\n  TVariables,\n  TContext,\n  Result = MutationResult<TData, TError, TVariables, TContext>,\n> = ToRefs<Readonly<Result>> & {\n  mutate: MutateSyncFunction<TData, TError, TVariables, TContext>\n  mutateAsync: MutateFunction<TData, TError, TVariables, TContext>\n  reset: MutationObserverResult<TData, TError, TVariables, TContext>['reset']\n}\n\nexport function useMutation<\n  TData = unknown,\n  TError = unknown,\n  TVariables = void,\n  TContext = unknown,\n>(\n  options: UseMutationOptions<TData, TError, TVariables, TContext>,\n): UseMutationReturnType<TData, TError, TVariables, TContext>\nexport function useMutation<\n  TData = unknown,\n  TError = unknown,\n  TVariables = void,\n  TContext = unknown,\n>(\n  mutationFn: MutationFunction<TData, TVariables>,\n  options?: Omit<\n    UseMutationOptions<TData, TError, TVariables, TContext>,\n    'mutationFn'\n  >,\n): UseMutationReturnType<TData, TError, TVariables, TContext>\nexport function useMutation<\n  TData = unknown,\n  TError = unknown,\n  TVariables = void,\n  TContext = unknown,\n>(\n  mutationKey: MutationKey,\n  options?: Omit<\n    UseMutationOptions<TData, TError, TVariables, TContext>,\n    'mutationKey'\n  >,\n): UseMutationReturnType<TData, TError, TVariables, TContext>\nexport function useMutation<\n  TData = unknown,\n  TError = unknown,\n  TVariables = void,\n  TContext = unknown,\n>(\n  mutationKey: MutationKey,\n  mutationFn?: MutationFunction<TData, TVariables>,\n  options?: Omit<\n    UseMutationOptions<TData, TError, TVariables, TContext>,\n    'mutationKey' | 'mutationFn'\n  >,\n): UseMutationReturnType<TData, TError, TVariables, TContext>\nexport function useMutation<\n  TData = unknown,\n  TError = unknown,\n  TVariables = void,\n  TContext = unknown,\n>(\n  arg1:\n    | MutationKey\n    | MutationFunction<TData, TVariables>\n    | UseMutationOptions<TData, TError, TVariables, TContext>,\n  arg2?:\n    | MutationFunction<TData, TVariables>\n    | UseMutationOptions<TData, TError, TVariables, TContext>,\n  arg3?: UseMutationOptions<TData, TError, TVariables, TContext>,\n): UseMutationReturnType<TData, TError, TVariables, TContext> {\n  const options = parseMutationArgs(arg1, arg2, arg3)\n  const queryClient =\n    options.queryClient ?? useQueryClient(options.queryClientKey)\n  const defaultedOptions = queryClient.defaultMutationOptions(options)\n  const observer = new MutationObserver(queryClient, defaultedOptions)\n\n  const state = reactive(observer.getCurrentResult())\n\n  const unsubscribe = observer.subscribe((result) => {\n    updateState(state, result)\n  })\n\n  const mutate = (\n    variables: TVariables,\n    mutateOptions?: MutateOptions<TData, TError, TVariables, TContext>,\n  ) => {\n    observer.mutate(variables, mutateOptions).catch(() => {\n      // This is intentional\n    })\n  }\n\n  watch(\n    [() => arg1, () => arg2, () => arg3],\n    () => {\n      observer.setOptions(\n        queryClient.defaultMutationOptions(parseMutationArgs(arg1, arg2, arg3)),\n      )\n    },\n    { deep: true },\n  )\n\n  onScopeDispose(() => {\n    unsubscribe()\n  })\n\n  const resultRefs = toRefs(readonly(state)) as unknown as ToRefs<\n    Readonly<MutationResult<TData, TError, TVariables, TContext>>\n  >\n\n  return {\n    ...resultRefs,\n    mutate,\n    mutateAsync: state.mutate,\n    reset: state.reset,\n  }\n}\n\nexport function parseMutationArgs<\n  TData = unknown,\n  TError = unknown,\n  TVariables = void,\n  TContext = unknown,\n>(\n  arg1:\n    | MutationKey\n    | MutationFunction<TData, TVariables>\n    | UseMutationOptions<TData, TError, TVariables, TContext>,\n  arg2?:\n    | MutationFunction<TData, TVariables>\n    | UseMutationOptions<TData, TError, TVariables, TContext>,\n  arg3?: UseMutationOptions<TData, TError, TVariables, TContext>,\n): UseMutationOptions<TData, TError, TVariables, TContext> {\n  let options = arg1\n\n  if (isQueryKey(arg1)) {\n    if (typeof arg2 === 'function') {\n      options = { ...arg3, mutationKey: arg1, mutationFn: arg2 }\n    } else {\n      options = { ...arg2, mutationKey: arg1 }\n    }\n  }\n\n  if (typeof arg1 === 'function') {\n    options = { ...arg2, mutationFn: arg1 }\n  }\n\n  return cloneDeepUnref(options) as UseMutationOptions<\n    TData,\n    TError,\n    TVariables,\n    TContext\n  >\n}\n","import { onScopeDispose, ref, watch } from 'vue-demi'\nimport type { Ref } from 'vue-demi'\nimport type { QueryKey, QueryFilters as QF } from '@tanstack/query-core'\n\nimport { useQueryClient } from './useQueryClient'\nimport { cloneDeepUnref, isQueryKey } from './utils'\nimport type { MaybeRefDeep, WithQueryClientKey } from './types'\n\nexport type QueryFilters = MaybeRefDeep<WithQueryClientKey<QF>>\n\nexport function useIsFetching(filters?: QueryFilters): Ref<number>\nexport function useIsFetching(\n  queryKey?: QueryKey,\n  filters?: QueryFilters,\n): Ref<number>\nexport function useIsFetching(\n  arg1?: QueryKey | QueryFilters,\n  arg2?: QueryFilters,\n): Ref<number> {\n  const filters = ref(parseFilterArgs(arg1, arg2))\n  const queryClient =\n    filters.value.queryClient ?? useQueryClient(filters.value.queryClientKey)\n\n  const isFetching = ref(queryClient.isFetching(filters))\n\n  const unsubscribe = queryClient.getQueryCache().subscribe(() => {\n    isFetching.value = queryClient.isFetching(filters)\n  })\n\n  watch(\n    [() => arg1, () => arg2],\n    () => {\n      filters.value = parseFilterArgs(arg1, arg2)\n      isFetching.value = queryClient.isFetching(filters)\n    },\n    { deep: true },\n  )\n\n  onScopeDispose(() => {\n    unsubscribe()\n  })\n\n  return isFetching\n}\n\nexport function parseFilterArgs(\n  arg1?: QueryKey | QueryFilters,\n  arg2: QueryFilters = {},\n) {\n  let options: QueryFilters\n\n  if (isQueryKey(arg1)) {\n    options = { ...arg2, queryKey: arg1 }\n  } else {\n    // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n    options = arg1 || {}\n  }\n\n  return cloneDeepUnref(options) as WithQueryClientKey<QF>\n}\n","import { onScopeDispose, ref, watch } from 'vue-demi'\nimport type { Ref } from 'vue-demi'\nimport type { MutationKey, MutationFilters as MF } from '@tanstack/query-core'\n\nimport { useQueryClient } from './useQueryClient'\nimport { cloneDeepUnref, isQueryKey } from './utils'\nimport type { MaybeRefDeep, WithQueryClientKey } from './types'\n\nexport type MutationFilters = MaybeRefDeep<WithQueryClientKey<MF>>\n\nexport function useIsMutating(filters?: MutationFilters): Ref<number>\nexport function useIsMutating(\n  mutationKey?: MutationKey,\n  filters?: Omit<MutationFilters, 'mutationKey'>,\n): Ref<number>\nexport function useIsMutating(\n  arg1?: MutationKey | MutationFilters,\n  arg2?: Omit<MutationFilters, 'mutationKey'>,\n): Ref<number> {\n  const filters = ref(parseMutationFilterArgs(arg1, arg2))\n  const queryClient =\n    filters.value.queryClient ?? useQueryClient(filters.value.queryClientKey)\n\n  const isMutating = ref(queryClient.isMutating(filters))\n\n  const unsubscribe = queryClient.getMutationCache().subscribe(() => {\n    isMutating.value = queryClient.isMutating(filters)\n  })\n\n  watch(\n    [() => arg1, () => arg2],\n    () => {\n      filters.value = parseMutationFilterArgs(arg1, arg2)\n      isMutating.value = queryClient.isMutating(filters)\n    },\n    { deep: true },\n  )\n\n  onScopeDispose(() => {\n    unsubscribe()\n  })\n\n  return isMutating\n}\n\nexport function parseMutationFilterArgs(\n  arg1?: MutationKey | MutationFilters,\n  arg2: MutationFilters = {},\n) {\n  let options: MutationFilters\n\n  if (isQueryKey(arg1)) {\n    options = { ...arg2, mutationKey: arg1 }\n  } else {\n    // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n    options = arg1 || {}\n  }\n\n  return cloneDeepUnref(options) as WithQueryClientKey<MF>\n}\n","import { InfiniteQueryObserver } from '@tanstack/query-core'\nimport type { UnwrapRef } from 'vue-demi'\nimport type {\n  QueryObserver,\n  QueryFunction,\n  QueryKey,\n  InfiniteQueryObserverResult,\n} from '@tanstack/query-core'\n\nimport { useBaseQuery } from './useBaseQuery'\nimport type { UseQueryReturnType } from './useBaseQuery'\n\nimport type {\n  WithQueryClientKey,\n  VueInfiniteQueryObserverOptions,\n} from './types'\n\nexport type UseInfiniteQueryOptions<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n> = WithQueryClientKey<\n  VueInfiniteQueryObserverOptions<\n    TQueryFnData,\n    TError,\n    TData,\n    TQueryFnData,\n    TQueryKey\n  >\n>\n\ntype InfiniteQueryReturnType<TData, TError> = UseQueryReturnType<\n  TData,\n  TError,\n  InfiniteQueryObserverResult<TData, TError>\n>\ntype UseInfiniteQueryReturnType<TData, TError> = Omit<\n  InfiniteQueryReturnType<TData, TError>,\n  'fetchNextPage' | 'fetchPreviousPage' | 'refetch' | 'remove'\n> & {\n  fetchNextPage: InfiniteQueryObserverResult<TData, TError>['fetchNextPage']\n  fetchPreviousPage: InfiniteQueryObserverResult<\n    TData,\n    TError\n  >['fetchPreviousPage']\n  refetch: InfiniteQueryObserverResult<TData, TError>['refetch']\n  remove: InfiniteQueryObserverResult<TData, TError>['remove']\n}\n\nexport function useInfiniteQuery<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n>(\n  options: UseInfiniteQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n): UseInfiniteQueryReturnType<TData, TError>\n\nexport function useInfiniteQuery<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n>(\n  queryKey: TQueryKey,\n  options?: Omit<\n    UseInfiniteQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n    'queryKey'\n  >,\n): UseInfiniteQueryReturnType<TData, TError>\n\nexport function useInfiniteQuery<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n>(\n  queryKey: TQueryKey,\n  queryFn: QueryFunction<TQueryFnData, UnwrapRef<TQueryKey>>,\n  options?: Omit<\n    UseInfiniteQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n    'queryKey' | 'queryFn'\n  >,\n): UseInfiniteQueryReturnType<TData, TError>\n\nexport function useInfiniteQuery<\n  TQueryFnData,\n  TError,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n>(\n  arg1:\n    | TQueryKey\n    | UseInfiniteQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n  arg2?:\n    | QueryFunction<TQueryFnData, UnwrapRef<TQueryKey>>\n    | UseInfiniteQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n  arg3?: UseInfiniteQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n): UseInfiniteQueryReturnType<TData, TError> {\n  const result = useBaseQuery(\n    InfiniteQueryObserver as typeof QueryObserver,\n    arg1,\n    arg2,\n    arg3,\n  ) as InfiniteQueryReturnType<TData, TError>\n  return {\n    ...result,\n    fetchNextPage: result.fetchNextPage.value,\n    fetchPreviousPage: result.fetchPreviousPage.value,\n    refetch: result.refetch.value,\n    remove: result.remove.value,\n  }\n}\n","/* eslint-disable @typescript-eslint/no-explicit-any */\nimport { QueriesObserver } from '@tanstack/query-core'\nimport { onScopeDispose, reactive, readonly, watch } from 'vue-demi'\nimport type { Ref } from 'vue-demi'\n\nimport type { QueryFunction, QueryObserverResult } from '@tanstack/query-core'\n\nimport { useQueryClient } from './useQueryClient'\nimport type { UseQueryOptions } from './useQuery'\nimport { cloneDeepUnref } from './utils'\n\n// Avoid TS depth-limit error in case of large array literal\ntype MAXIMUM_DEPTH = 20\n\ntype GetOptions<T> =\n  // Part 1: responsible for applying explicit type parameter to function arguments, if object { queryFnData: TQueryFnData, error: TError, data: TData }\n  T extends {\n    queryFnData: infer TQueryFnData\n    error?: infer TError\n    data: infer TData\n  }\n    ? UseQueryOptions<TQueryFnData, TError, TData>\n    : T extends { queryFnData: infer TQueryFnData; error?: infer TError }\n    ? UseQueryOptions<TQueryFnData, TError>\n    : T extends { data: infer TData; error?: infer TError }\n    ? UseQueryOptions<unknown, TError, TData>\n    : // Part 2: responsible for applying explicit type parameter to function arguments, if tuple [TQueryFnData, TError, TData]\n    T extends [infer TQueryFnData, infer TError, infer TData]\n    ? UseQueryOptions<TQueryFnData, TError, TData>\n    : T extends [infer TQueryFnData, infer TError]\n    ? UseQueryOptions<TQueryFnData, TError>\n    : T extends [infer TQueryFnData]\n    ? UseQueryOptions<TQueryFnData>\n    : // Part 3: responsible for inferring and enforcing type if no explicit parameter was provided\n    T extends {\n        queryFn?: QueryFunction<infer TQueryFnData, infer TQueryKey>\n        select: (data: any) => infer TData\n      }\n    ? UseQueryOptions<TQueryFnData, unknown, TData, TQueryKey>\n    : T extends { queryFn?: QueryFunction<infer TQueryFnData, infer TQueryKey> }\n    ? UseQueryOptions<TQueryFnData, unknown, TQueryFnData, TQueryKey>\n    : // Fallback\n      UseQueryOptions\n\ntype GetResults<T> =\n  // Part 1: responsible for mapping explicit type parameter to function result, if object\n  T extends { queryFnData: any; error?: infer TError; data: infer TData }\n    ? QueryObserverResult<TData, TError>\n    : T extends { queryFnData: infer TQueryFnData; error?: infer TError }\n    ? QueryObserverResult<TQueryFnData, TError>\n    : T extends { data: infer TData; error?: infer TError }\n    ? QueryObserverResult<TData, TError>\n    : // Part 2: responsible for mapping explicit type parameter to function result, if tuple\n    T extends [any, infer TError, infer TData]\n    ? QueryObserverResult<TData, TError>\n    : T extends [infer TQueryFnData, infer TError]\n    ? QueryObserverResult<TQueryFnData, TError>\n    : T extends [infer TQueryFnData]\n    ? QueryObserverResult<TQueryFnData>\n    : // Part 3: responsible for mapping inferred type to results, if no explicit parameter was provided\n    T extends {\n        queryFn?: QueryFunction<unknown, any>\n        select: (data: any) => infer TData\n      }\n    ? QueryObserverResult<TData>\n    : T extends { queryFn?: QueryFunction<infer TQueryFnData, any> }\n    ? QueryObserverResult<TQueryFnData>\n    : // Fallback\n      QueryObserverResult\n\n/**\n * UseQueriesOptions reducer recursively unwraps function arguments to infer/enforce type param\n */\nexport type UseQueriesOptions<\n  T extends any[],\n  Result extends any[] = [],\n  Depth extends ReadonlyArray<number> = [],\n> = Depth['length'] extends MAXIMUM_DEPTH\n  ? UseQueryOptions[]\n  : T extends []\n  ? []\n  : T extends [infer Head]\n  ? [...Result, GetOptions<Head>]\n  : T extends [infer Head, ...infer Tail]\n  ? UseQueriesOptions<[...Tail], [...Result, GetOptions<Head>], [...Depth, 1]>\n  : unknown[] extends T\n  ? T\n  : // If T is *some* array but we couldn't assign unknown[] to it, then it must hold some known/homogenous type!\n  // use this to infer the param types in the case of Array.map() argument\n  T extends UseQueryOptions<\n      infer TQueryFnData,\n      infer TError,\n      infer TData,\n      infer TQueryKey\n    >[]\n  ? UseQueryOptions<TQueryFnData, TError, TData, TQueryKey>[]\n  : // Fallback\n    UseQueryOptions[]\n\n/**\n * UseQueriesResults reducer recursively maps type param to results\n */\nexport type UseQueriesResults<\n  T extends any[],\n  Result extends any[] = [],\n  Depth extends ReadonlyArray<number> = [],\n> = Depth['length'] extends MAXIMUM_DEPTH\n  ? QueryObserverResult[]\n  : T extends []\n  ? []\n  : T extends [infer Head]\n  ? [...Result, GetResults<Head>]\n  : T extends [infer Head, ...infer Tail]\n  ? UseQueriesResults<[...Tail], [...Result, GetResults<Head>], [...Depth, 1]>\n  : T extends UseQueryOptions<\n      infer TQueryFnData,\n      infer TError,\n      infer TData,\n      any\n    >[]\n  ? // Dynamic-size (homogenous) UseQueryOptions array: map directly to array of results\n    QueryObserverResult<unknown extends TData ? TQueryFnData : TData, TError>[]\n  : // Fallback\n    QueryObserverResult[]\n\ntype UseQueriesOptionsArg<T extends any[]> = readonly [...UseQueriesOptions<T>]\n\nexport function useQueries<T extends any[]>({\n  queries,\n}: {\n  queries: Ref<UseQueriesOptionsArg<T>> | UseQueriesOptionsArg<T>\n}): Readonly<UseQueriesResults<T>> {\n  const unreffedQueries = cloneDeepUnref(queries) as UseQueriesOptionsArg<T>\n\n  const queryClientKey = unreffedQueries[0].queryClientKey\n  const optionsQueryClient = unreffedQueries[0].queryClient\n  const queryClient = optionsQueryClient ?? useQueryClient(queryClientKey)\n  const defaultedQueries = unreffedQueries.map((options) => {\n    return queryClient.defaultQueryOptions(options)\n  })\n\n  const observer = new QueriesObserver(queryClient, defaultedQueries)\n  const state = reactive(observer.getCurrentResult())\n\n  const unsubscribe = observer.subscribe((result) => {\n    state.splice(0, state.length, ...result)\n  })\n\n  watch(\n    () => queries,\n    () => {\n      const defaulted = (\n        cloneDeepUnref(queries) as UseQueriesOptionsArg<T>\n      ).map((options) => {\n        return queryClient.defaultQueryOptions(options)\n      })\n      observer.setQueries(defaulted)\n    },\n    { deep: true },\n  )\n\n  onScopeDispose(() => {\n    unsubscribe()\n  })\n\n  return readonly(state) as UseQueriesResults<T>\n}\n","import type { ToRefs, UnwrapRef } from 'vue-demi'\nimport { QueryObserver } from '@tanstack/query-core'\nimport type {\n  QueryFunction,\n  QueryKey,\n  QueryObserverResult,\n  DefinedQueryObserverResult,\n} from '@tanstack/query-core'\nimport { useBaseQuery } from './useBaseQuery'\nimport type { UseQueryReturnType as UQRT } from './useBaseQuery'\nimport type { WithQueryClientKey, VueQueryObserverOptions } from './types'\n\ntype UseQueryReturnType<TData, TError> = Omit<\n  UQRT<TData, TError>,\n  'refetch' | 'remove'\n> & {\n  refetch: QueryObserverResult<TData, TError>['refetch']\n  remove: QueryObserverResult<TData, TError>['remove']\n}\n\ntype UseQueryDefinedReturnType<TData, TError> = Omit<\n  ToRefs<Readonly<DefinedQueryObserverResult<TData, TError>>>,\n  'refetch' | 'remove'\n> & {\n  suspense: () => Promise<QueryObserverResult<TData, TError>>\n  refetch: QueryObserverResult<TData, TError>['refetch']\n  remove: QueryObserverResult<TData, TError>['remove']\n}\n\nexport type UseQueryOptions<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n> = WithQueryClientKey<\n  VueQueryObserverOptions<TQueryFnData, TError, TData, TQueryFnData, TQueryKey>\n>\n\nexport function useQuery<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n>(\n  options: Omit<\n    UseQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n    'initialData'\n  > & { initialData?: () => undefined },\n): UseQueryReturnType<TData, TError>\n\nexport function useQuery<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n>(\n  options: Omit<\n    UseQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n    'initialData'\n  > & { initialData: TQueryFnData | (() => TQueryFnData) },\n): UseQueryDefinedReturnType<TData, TError>\n\nexport function useQuery<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n>(\n  options: UseQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n): UseQueryReturnType<TData, TError>\n\nexport function useQuery<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n>(\n  queryKey: TQueryKey,\n  options?: Omit<\n    UseQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n    'queryKey' | 'initialData'\n  > & { initialData?: () => undefined },\n): UseQueryReturnType<TData, TError>\n\nexport function useQuery<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n>(\n  queryKey: TQueryKey,\n  options?: Omit<\n    UseQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n    'queryKey' | 'initialData'\n  > & { initialData: TQueryFnData | (() => TQueryFnData) },\n): UseQueryDefinedReturnType<TData, TError>\n\nexport function useQuery<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n>(\n  queryKey: TQueryKey,\n  options?: Omit<\n    UseQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n    'queryKey'\n  >,\n): UseQueryReturnType<TData, TError>\n\nexport function useQuery<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n>(\n  queryKey: TQueryKey,\n  queryFn: QueryFunction<TQueryFnData, TQueryKey>,\n  options?: Omit<\n    UseQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n    'queryKey' | 'queryFn' | 'initialData'\n  > & { initialData?: () => undefined },\n): UseQueryReturnType<TData, TError>\n\nexport function useQuery<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n>(\n  queryKey: TQueryKey,\n  queryFn: QueryFunction<TQueryFnData, TQueryKey>,\n  options?: Omit<\n    UseQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n    'queryKey' | 'queryFn' | 'initialData'\n  > & { initialData: TQueryFnData | (() => TQueryFnData) },\n): UseQueryDefinedReturnType<TData, TError>\n\nexport function useQuery<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n>(\n  queryKey: TQueryKey,\n  queryFn: QueryFunction<TQueryFnData, TQueryKey>,\n  options?: Omit<\n    UseQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n    'queryKey' | 'queryFn'\n  >,\n): UseQueryReturnType<TData, TError>\n\nexport function useQuery<\n  TQueryFnData,\n  TError,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n>(\n  arg1: TQueryKey | UseQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n  arg2?:\n    | QueryFunction<TQueryFnData, UnwrapRef<TQueryKey>>\n    | UseQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n  arg3?: UseQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n):\n  | UseQueryReturnType<TData, TError>\n  | UseQueryDefinedReturnType<TData, TError> {\n  const result = useBaseQuery(QueryObserver, arg1, arg2, arg3)\n\n  return {\n    ...result,\n    refetch: result.refetch.value,\n    remove: result.remove.value,\n  }\n}\n"],"names":["Subscribable","constructor","this","listeners","subscribe","bind","listener","push","onSubscribe","filter","x","onUnsubscribe","hasListeners","length","isServer","window","noop","isValidTimeout","value","Infinity","difference","array1","array2","indexOf","timeUntilStale","updatedAt","staleTime","Math","max","Date","now","parseQueryArgs","arg1","arg2","arg3","isQueryKey","queryKey","queryFn","parseFilterArgs","matchQuery","filters","query","type","exact","fetchStatus","predicate","stale","queryHash","hashQueryKeyByOptions","options","partialMatchKey","isActive","isStale","state","matchMutation","mutation","fetching","mutationKey","hashQueryKey","status","queryKeyHashFn","JSON","stringify","_","val","isPlainObject","Object","keys","sort","reduce","result","key","a","b","partialDeepEqual","some","replaceEqualDeep","array","isPlainArray","aSize","bItems","bSize","copy","equalItems","i","shallowEqualObjects","Array","isArray","o","hasObjectPrototype","ctor","prot","prototype","hasOwnProperty","toString","call","sleep","timeout","Promise","resolve","setTimeout","scheduleMicrotask","callback","then","replaceData","prevData","data","isDataEqual","structuralSharing","focusManager","super","setup","onFocus","addEventListener","removeEventListener","cleanup","setEventListener","_this$cleanup","undefined","_this$cleanup2","focused","setFocused","forEach","isFocused","document","includes","visibilityState","onlineManager","onOnline","online","setOnline","isOnline","navigator","onLine","defaultRetryDelay","failureCount","min","canFetch","networkMode","CancelledError","revert","silent","isCancelledError","createRetryer","config","continueFn","promiseResolve","promiseReject","isRetryCancelled","isResolved","promise","outerResolve","outerReject","shouldPause","onSuccess","reject","onError","pause","continueResolve","onPause","onContinue","run","promiseOrValue","fn","error","catch","_config$retry","_config$retryDelay","retry","retryDelay","delay","shouldRetry","onFail","cancel","cancelOptions","abort","continue","cancelRetry","continueRetry","defaultLogger","console","notifyManager","queue","transactions","notifyFn","batchNotifyFn","schedule","flush","originalQueue","batch","batchCalls","args","setNotifyFunction","setBatchNotifyFunction","createNotifyManager","Removable","destroy","clearGcTimeout","scheduleGc","cacheTime","gcTimeout","optionalRemove","updateCacheTime","newCacheTime","clearTimeout","Query","abortSignalConsumed","defaultOptions","setOptions","observers","cache","logger","initialState","initialData","initialDataUpdatedAt","hasData","dataUpdateCount","dataUpdatedAt","errorUpdateCount","errorUpdatedAt","fetchFailureCount","fetchMeta","isInvalidated","getDefaultState","meta","remove","setData","newData","dispatch","manual","setState","setStateOptions","_this$retryer","retryer","reset","observer","enabled","isDisabled","getObserversCount","getCurrentResult","isStaleByTime","_this$retryer2","find","shouldFetchOnWindowFocus","refetch","cancelRefetch","_this$retryer3","shouldFetchOnReconnect","addObserver","notify","removeObserver","invalidate","fetch","fetchOptions","_this$options$behavio","_context$fetchOptions","_this$retryer4","abortController","AbortController","getAbortController","queryFnContext","pageParam","addSignalProperty","object","defineProperty","enumerable","get","signal","context","fetchFn","_context$fetchOptions2","behavior","onFetch","revertState","_this$cache$config$on","_this$cache$config","isFetchingOptimistic","_this$cache$config$on2","_this$cache$config2","Error","action","_action$meta","_action$dataUpdatedAt","reducer","onQueryUpdate","QueryCache","queries","queriesMap","build","client","_options$queryHash","getLogger","defaultQueryOptions","getQueryDefaults","add","queryInMap","clear","getAll","findAll","event","Mutation","mutationId","mutationCache","execute","async","executeMutation","_this$options$retry","mutationFn","variables","restored","_this$mutationCache$c3","_this$mutationCache$c4","_this$options$onSucce","_this$options2","_this$options$onSettl","_this$options3","_this$mutationCache$c","_this$mutationCache$c2","_this$options$onMutat","_this$options","onMutate","onSettled","_this$mutationCache$c5","_this$mutationCache$c6","_this$options$onError","_this$options4","_this$options$onSettl2","_this$options5","isPaused","onMutationUpdate","MutationCache","mutations","defaultMutationOptions","getMutationDefaults","resumePausedMutations","pausedMutations","infiniteQueryBehavior","_context$fetchOptions3","_context$fetchOptions4","_context$state$data","_context$state$data2","refetchPage","fetchMore","isFetchingNextPage","direction","isFetchingPreviousPage","oldPages","pages","oldPageParams","pageParams","newPageParams","cancelled","buildNewPages","param","page","previous","fetchPage","_context$signal","_context$signal2","aborted","queryFnResult","getNextPageParam","getPreviousPageParam","hasNextPage","nextPageParam","hasPreviousPage","previousPageParam","QueryObserver","trackedProps","Set","selectError","bindMethods","currentQuery","shouldFetchOnMount","executeFetch","updateTimers","shouldFetchOn","refetchOnReconnect","refetchOnWindowFocus","clearStaleTimeout","clearRefetchInterval","notifyOptions","prevOptions","prevQuery","getQueryCache","updateQuery","mounted","shouldFetchOptionally","updateResult","updateStaleTimeout","nextRefetchInterval","computeRefetchInterval","currentRefetchInterval","updateRefetchInterval","getOptimisticResult","createResult","currentResult","trackResult","trackedResult","configurable","getCurrentQuery","fetchOptimistic","defaultedOptions","_fetchOptions$cancelR","throwOnError","staleTimeoutId","_this$options$refetch","refetchInterval","nextInterval","refetchIntervalId","setInterval","refetchIntervalInBackground","clearInterval","prevResult","prevResultState","currentResultState","prevResultOptions","currentResultOptions","queryChange","queryInitialState","currentQueryInitialState","prevQueryResult","previousQueryResult","isPreviousData","isPlaceholderData","_optimisticResults","fetchOnMount","fetchOptionally","keepPreviousData","isSuccess","select","selectFn","selectResult","placeholderData","isFetching","isLoading","isError","isInitialLoading","isFetched","isFetchedAfterMount","isRefetching","isLoadingError","isRefetchError","nextResult","defaultNotifyOptions","notifyOnChangeProps","size","includedProps","useErrorBoundary","typedKey","has","shouldNotifyListeners","retryOnMount","shouldLoadOnMount","refetchOnMount","field","suspense","QueriesObserver","observersMap","setQueries","onUpdate","prevObservers","newObserverMatches","findMatchingObservers","match","defaultedQueryOptions","newObservers","map","newObserversMap","fromEntries","newResult","hasIndexChange","index","getQueries","matchingObservers","flatMap","matchedQueryHashes","unmatchedQueries","unmatchedObservers","prevObserver","getObserver","currentObserver","newOrReusedObservers","previouslyUsedObserver","concat","slice","replaceAt","InfiniteQueryObserver","fetchNextPage","fetchPreviousPage","_state$data","_state$data2","_state$fetchMeta","_state$fetchMeta$fetc","_state$fetchMeta2","_state$fetchMeta2$fet","MutationObserver","mutate","getMutationCache","currentMutation","_this$currentMutation","mutateOptions","isIdle","_this$mutateOptions$o","_this$mutateOptions","_this$mutateOptions$o2","_this$mutateOptions2","_this$mutateOptions$o3","_this$mutateOptions3","_this$mutateOptions$o4","_this$mutateOptions4","defaultShouldDehydrateMutation","defaultShouldDehydrateQuery","VUE_QUERY_CLIENT","getClientKey","updateState","update","cloneDeep","customizer","isRef","getPrototypeOf","entries","cloneDeepUnref","obj","unref","useQueryClient","id","_getCurrentInstance","getCurrentInstance","proxy","queryClient","inject","QC","arg1Unreffed","arg2Unreffed","MC","QueryClient","queryCache","queryDefaults","mutationDefaults","mount","unsubscribeFocus","unsubscribeOnline","unmount","_this$unsubscribeFocu","_this$unsubscribeOnli","isMutating","getQueryData","_this$queryCache$find","getQueriesData","queryKeyOrFilters","setQueryData","updater","input","functionalUpdate","parsedOptions","setQueriesData","getQueryState","_this$queryCache$find2","removeQueries","resetQueries","refetchFilters","refetchQueries","cancelQueries","promises","all","invalidateQueries","_ref","_filters$refetchType","refetchType","_options$cancelRefetc","fetchQuery","prefetchQuery","fetchInfiniteQuery","prefetchInfiniteQuery","getDefaultOptions","setDefaultOptions","setQueryDefaults","firstMatchingDefaults","setMutationDefaults","_defaulted","unreffedConfig","unreffed","arg3Unreffed","VueQueryPlugin","install","app","clientKey","queryClientKey","contextSharing","__VUE_QUERY_CONTEXT__","clientConfig","queryClientConfig","onUnmount","originalUnmount","isVue2","mixin","beforeCreate","_provided","provideCache","set","v","assign","provide","useBaseQuery","Observer","_options$queryClient","getQueryUnreffedOptions","reactive","unsubscribe","watch","deep","onScopeDispose","toRefs","readonly","newOptions","optimisticResult","mergedOptions","parseMutationArgs","parseMutationFilterArgs","dehydrateMutations","shouldDehydrateMutation","dehydrateMutation","dehydrateQueries","shouldDehydrateQuery","dehydrateQuery","dehydratedState","dehydratedMutation","_options$defaultOptio","dehydratedQuery","_options$defaultOptio2","_filters$value$queryC","ref","mutateAsync","unreffedQueries","optionsQueryClient","defaultedQueries","splice","defaulted"],"mappings":"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"}