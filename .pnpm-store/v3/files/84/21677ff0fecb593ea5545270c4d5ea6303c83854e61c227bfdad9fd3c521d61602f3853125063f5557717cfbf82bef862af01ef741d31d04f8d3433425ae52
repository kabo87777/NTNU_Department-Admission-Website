{"version":3,"file":"useMutation.mjs","sources":["../../src/useMutation.ts"],"sourcesContent":["import { onScopeDispose, reactive, readonly, toRefs, watch } from 'vue-demi'\nimport type { ToRefs } from 'vue-demi'\nimport { MutationObserver } from '@tanstack/query-core'\nimport type {\n  MutateOptions,\n  MutationFunction,\n  MutationKey,\n  MutationObserverOptions,\n  MutateFunction,\n  MutationObserverResult,\n} from '@tanstack/query-core'\nimport { cloneDeepUnref, isQueryKey, updateState } from './utils'\nimport { useQueryClient } from './useQueryClient'\nimport type { WithQueryClientKey } from './types'\n\ntype MutationResult<TData, TError, TVariables, TContext> = Omit<\n  MutationObserverResult<TData, TError, TVariables, TContext>,\n  'mutate' | 'reset'\n>\n\nexport type UseMutationOptions<TData, TError, TVariables, TContext> =\n  WithQueryClientKey<\n    MutationObserverOptions<TData, TError, TVariables, TContext>\n  >\n\ntype MutateSyncFunction<\n  TData = unknown,\n  TError = unknown,\n  TVariables = void,\n  TContext = unknown,\n> = (\n  ...options: Parameters<MutateFunction<TData, TError, TVariables, TContext>>\n) => void\n\nexport type UseMutationReturnType<\n  TData,\n  TError,\n  TVariables,\n  TContext,\n  Result = MutationResult<TData, TError, TVariables, TContext>,\n> = ToRefs<Readonly<Result>> & {\n  mutate: MutateSyncFunction<TData, TError, TVariables, TContext>\n  mutateAsync: MutateFunction<TData, TError, TVariables, TContext>\n  reset: MutationObserverResult<TData, TError, TVariables, TContext>['reset']\n}\n\nexport function useMutation<\n  TData = unknown,\n  TError = unknown,\n  TVariables = void,\n  TContext = unknown,\n>(\n  options: UseMutationOptions<TData, TError, TVariables, TContext>,\n): UseMutationReturnType<TData, TError, TVariables, TContext>\nexport function useMutation<\n  TData = unknown,\n  TError = unknown,\n  TVariables = void,\n  TContext = unknown,\n>(\n  mutationFn: MutationFunction<TData, TVariables>,\n  options?: Omit<\n    UseMutationOptions<TData, TError, TVariables, TContext>,\n    'mutationFn'\n  >,\n): UseMutationReturnType<TData, TError, TVariables, TContext>\nexport function useMutation<\n  TData = unknown,\n  TError = unknown,\n  TVariables = void,\n  TContext = unknown,\n>(\n  mutationKey: MutationKey,\n  options?: Omit<\n    UseMutationOptions<TData, TError, TVariables, TContext>,\n    'mutationKey'\n  >,\n): UseMutationReturnType<TData, TError, TVariables, TContext>\nexport function useMutation<\n  TData = unknown,\n  TError = unknown,\n  TVariables = void,\n  TContext = unknown,\n>(\n  mutationKey: MutationKey,\n  mutationFn?: MutationFunction<TData, TVariables>,\n  options?: Omit<\n    UseMutationOptions<TData, TError, TVariables, TContext>,\n    'mutationKey' | 'mutationFn'\n  >,\n): UseMutationReturnType<TData, TError, TVariables, TContext>\nexport function useMutation<\n  TData = unknown,\n  TError = unknown,\n  TVariables = void,\n  TContext = unknown,\n>(\n  arg1:\n    | MutationKey\n    | MutationFunction<TData, TVariables>\n    | UseMutationOptions<TData, TError, TVariables, TContext>,\n  arg2?:\n    | MutationFunction<TData, TVariables>\n    | UseMutationOptions<TData, TError, TVariables, TContext>,\n  arg3?: UseMutationOptions<TData, TError, TVariables, TContext>,\n): UseMutationReturnType<TData, TError, TVariables, TContext> {\n  const options = parseMutationArgs(arg1, arg2, arg3)\n  const queryClient =\n    options.queryClient ?? useQueryClient(options.queryClientKey)\n  const defaultedOptions = queryClient.defaultMutationOptions(options)\n  const observer = new MutationObserver(queryClient, defaultedOptions)\n\n  const state = reactive(observer.getCurrentResult())\n\n  const unsubscribe = observer.subscribe((result) => {\n    updateState(state, result)\n  })\n\n  const mutate = (\n    variables: TVariables,\n    mutateOptions?: MutateOptions<TData, TError, TVariables, TContext>,\n  ) => {\n    observer.mutate(variables, mutateOptions).catch(() => {\n      // This is intentional\n    })\n  }\n\n  watch(\n    [() => arg1, () => arg2, () => arg3],\n    () => {\n      observer.setOptions(\n        queryClient.defaultMutationOptions(parseMutationArgs(arg1, arg2, arg3)),\n      )\n    },\n    { deep: true },\n  )\n\n  onScopeDispose(() => {\n    unsubscribe()\n  })\n\n  const resultRefs = toRefs(readonly(state)) as unknown as ToRefs<\n    Readonly<MutationResult<TData, TError, TVariables, TContext>>\n  >\n\n  return {\n    ...resultRefs,\n    mutate,\n    mutateAsync: state.mutate,\n    reset: state.reset,\n  }\n}\n\nexport function parseMutationArgs<\n  TData = unknown,\n  TError = unknown,\n  TVariables = void,\n  TContext = unknown,\n>(\n  arg1:\n    | MutationKey\n    | MutationFunction<TData, TVariables>\n    | UseMutationOptions<TData, TError, TVariables, TContext>,\n  arg2?:\n    | MutationFunction<TData, TVariables>\n    | UseMutationOptions<TData, TError, TVariables, TContext>,\n  arg3?: UseMutationOptions<TData, TError, TVariables, TContext>,\n): UseMutationOptions<TData, TError, TVariables, TContext> {\n  let options = arg1\n\n  if (isQueryKey(arg1)) {\n    if (typeof arg2 === 'function') {\n      options = { ...arg3, mutationKey: arg1, mutationFn: arg2 }\n    } else {\n      options = { ...arg2, mutationKey: arg1 }\n    }\n  }\n\n  if (typeof arg1 === 'function') {\n    options = { ...arg2, mutationFn: arg1 }\n  }\n\n  return cloneDeepUnref(options) as UseMutationOptions<\n    TData,\n    TError,\n    TVariables,\n    TContext\n  >\n}\n"],"names":["useMutation","arg1","arg2","arg3","options","parseMutationArgs","queryClient","useQueryClient","queryClientKey","defaultedOptions","defaultMutationOptions","observer","MutationObserver","state","reactive","getCurrentResult","unsubscribe","subscribe","result","updateState","mutate","variables","mutateOptions","catch","watch","setOptions","deep","onScopeDispose","resultRefs","toRefs","readonly","mutateAsync","reset","isQueryKey","mutationKey","mutationFn","cloneDeepUnref"],"mappings":";;;;;AA2FO,SAASA,WAAT,CAMLC,IANK,EAULC,IAVK,EAaLC,IAbK,EAcuD;AAAA,EAAA,IAAA,oBAAA,CAAA;;EAC5D,MAAMC,OAAO,GAAGC,iBAAiB,CAACJ,IAAD,EAAOC,IAAP,EAAaC,IAAb,CAAjC,CAAA;EACA,MAAMG,WAAW,GACfF,CAAAA,oBAAAA,GAAAA,OAAO,CAACE,WADO,KACQC,IAAAA,GAAAA,oBAAAA,GAAAA,cAAc,CAACH,OAAO,CAACI,cAAT,CADvC,CAAA;AAEA,EAAA,MAAMC,gBAAgB,GAAGH,WAAW,CAACI,sBAAZ,CAAmCN,OAAnC,CAAzB,CAAA;EACA,MAAMO,QAAQ,GAAG,IAAIC,gBAAJ,CAAqBN,WAArB,EAAkCG,gBAAlC,CAAjB,CAAA;EAEA,MAAMI,KAAK,GAAGC,QAAQ,CAACH,QAAQ,CAACI,gBAAT,EAAD,CAAtB,CAAA;AAEA,EAAA,MAAMC,WAAW,GAAGL,QAAQ,CAACM,SAAT,CAAoBC,MAAD,IAAY;AACjDC,IAAAA,WAAW,CAACN,KAAD,EAAQK,MAAR,CAAX,CAAA;AACD,GAFmB,CAApB,CAAA;;AAIA,EAAA,MAAME,MAAM,GAAG,CACbC,SADa,EAEbC,aAFa,KAGV;IACHX,QAAQ,CAACS,MAAT,CAAgBC,SAAhB,EAA2BC,aAA3B,CAA0CC,CAAAA,KAA1C,CAAgD,MAAM;KAAtD,CAAA,CAAA;GAJF,CAAA;;AASAC,EAAAA,KAAK,CACH,CAAC,MAAMvB,IAAP,EAAa,MAAMC,IAAnB,EAAyB,MAAMC,IAA/B,CADG,EAEH,MAAM;AACJQ,IAAAA,QAAQ,CAACc,UAAT,CACEnB,WAAW,CAACI,sBAAZ,CAAmCL,iBAAiB,CAACJ,IAAD,EAAOC,IAAP,EAAaC,IAAb,CAApD,CADF,CAAA,CAAA;AAGD,GANE,EAOH;AAAEuB,IAAAA,IAAI,EAAE,IAAA;AAAR,GAPG,CAAL,CAAA;AAUAC,EAAAA,cAAc,CAAC,MAAM;IACnBX,WAAW,EAAA,CAAA;AACZ,GAFa,CAAd,CAAA;EAIA,MAAMY,UAAU,GAAGC,MAAM,CAACC,QAAQ,CAACjB,KAAD,CAAT,CAAzB,CAAA;EAIA,OAAO,EACL,GAAGe,UADE;IAELR,MAFK;IAGLW,WAAW,EAAElB,KAAK,CAACO,MAHd;IAILY,KAAK,EAAEnB,KAAK,CAACmB,KAAAA;GAJf,CAAA;AAMD,CAAA;AAEM,SAAS3B,iBAAT,CAMLJ,IANK,EAULC,IAVK,EAaLC,IAbK,EAcoD;EACzD,IAAIC,OAAO,GAAGH,IAAd,CAAA;;AAEA,EAAA,IAAIgC,UAAU,CAAChC,IAAD,CAAd,EAAsB;AACpB,IAAA,IAAI,OAAOC,IAAP,KAAgB,UAApB,EAAgC;MAC9BE,OAAO,GAAG,EAAE,GAAGD,IAAL;AAAW+B,QAAAA,WAAW,EAAEjC,IAAxB;AAA8BkC,QAAAA,UAAU,EAAEjC,IAAAA;OAApD,CAAA;AACD,KAFD,MAEO;MACLE,OAAO,GAAG,EAAE,GAAGF,IAAL;AAAWgC,QAAAA,WAAW,EAAEjC,IAAAA;OAAlC,CAAA;AACD,KAAA;AACF,GAAA;;AAED,EAAA,IAAI,OAAOA,IAAP,KAAgB,UAApB,EAAgC;IAC9BG,OAAO,GAAG,EAAE,GAAGF,IAAL;AAAWiC,MAAAA,UAAU,EAAElC,IAAAA;KAAjC,CAAA;AACD,GAAA;;EAED,OAAOmC,cAAc,CAAChC,OAAD,CAArB,CAAA;AAMD;;;;"}