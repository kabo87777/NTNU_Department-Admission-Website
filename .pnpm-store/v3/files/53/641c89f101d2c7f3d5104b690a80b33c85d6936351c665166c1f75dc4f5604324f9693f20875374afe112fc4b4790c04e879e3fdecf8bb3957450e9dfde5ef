'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var vueDemi = require('vue-demi');
var queryCore = require('@tanstack/query-core');
var utils = require('./utils.js');
var useQueryClient = require('./useQueryClient.js');

function useMutation(arg1, arg2, arg3) {
  var _options$queryClient;

  const options = parseMutationArgs(arg1, arg2, arg3);
  const queryClient = (_options$queryClient = options.queryClient) != null ? _options$queryClient : useQueryClient.useQueryClient(options.queryClientKey);
  const defaultedOptions = queryClient.defaultMutationOptions(options);
  const observer = new queryCore.MutationObserver(queryClient, defaultedOptions);
  const state = vueDemi.reactive(observer.getCurrentResult());
  const unsubscribe = observer.subscribe(result => {
    utils.updateState(state, result);
  });

  const mutate = (variables, mutateOptions) => {
    observer.mutate(variables, mutateOptions).catch(() => {// This is intentional
    });
  };

  vueDemi.watch([() => arg1, () => arg2, () => arg3], () => {
    observer.setOptions(queryClient.defaultMutationOptions(parseMutationArgs(arg1, arg2, arg3)));
  }, {
    deep: true
  });
  vueDemi.onScopeDispose(() => {
    unsubscribe();
  });
  const resultRefs = vueDemi.toRefs(vueDemi.readonly(state));
  return { ...resultRefs,
    mutate,
    mutateAsync: state.mutate,
    reset: state.reset
  };
}
function parseMutationArgs(arg1, arg2, arg3) {
  let options = arg1;

  if (utils.isQueryKey(arg1)) {
    if (typeof arg2 === 'function') {
      options = { ...arg3,
        mutationKey: arg1,
        mutationFn: arg2
      };
    } else {
      options = { ...arg2,
        mutationKey: arg1
      };
    }
  }

  if (typeof arg1 === 'function') {
    options = { ...arg2,
      mutationFn: arg1
    };
  }

  return utils.cloneDeepUnref(options);
}

exports.parseMutationArgs = parseMutationArgs;
exports.useMutation = useMutation;
//# sourceMappingURL=useMutation.js.map
